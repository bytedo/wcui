<template>
  <div class="layer">
    <div class="layer__title noselect"></div>
    <div class="layer__content"><slot></slot></div>
    <div class="layer__ctrl noselect"></div>
  </div>
</template>
<style lang="scss">
:host {
  display: flex;
  justify-content: center;
  align-items: center;
  width: auto;
  height: auto;
}
.noselect {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
  img,
  a {
    -webkit-user-drag: none;
  }
}

.layer {
  overflow: hidden;
  flex: 0 auto;
  position: fixed;
  z-index: 65535;
  border-radius: 4px;
  color: #666;
  font-size: 14px;
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
  transition: opacity 0.2s ease-in-out, left 0.2s ease-in-out,
    right 0.2s ease-in-out, top 0.2s ease-in-out, bottom 0.2s ease-in-out;
  opacity: 0;

  &.scale {
    transform: scale(1.01);
    transition: transform 0.1s linear;
  }
  &.blur {
    backdrop-filter: blur(5px);
  }

  &:active {
    z-index: 65536;
  }

  /* 弹层样式 */

  &__title {
    display: flex;
    width: 100%;
    height: 60px;
    padding: 15px;
    line-height: 30px;
    font-size: 16px;
    color: nth($cd, 2);
  }

  &__content {
    display: flex;
    position: relative;
    width: 100%;
    height: auto;
    min-height: 50px;
    word-break: break-all;
    word-wrap: break-word;

    ::slotted(&__input) {
      flex: 1;
      height: 32px;
    }

    ::slotted(&__frame) {
      display: flex;
      width: 100%;
      height: 100%;
      margin: 0;
      padding: 0;
      border: 0;
      resize: none;
      background: #fff;
    }

    ::slotted(&__toast) {
      display: flex;
      align-items: center;
      width: 300px;
      padding: 0 10px !important;
      border-radius: 4px;
    }

    ::slotted(&__toast.style-info) {
      border: 1px solid nth($cp, 3);
      background: nth($cp, 2);
      color: nth($cgr, 3);
    }
    ::slotted(&__toast.style-warn) {
      border: 1px solid #faebb4;
      background: #fffbed;
      color: nth($co, 3);
    }
    ::slotted(&__toast.style-error) {
      border: 1px solid #f5c4c4;
      background: #fef0f0;
      color: nth($cr, 1);
    }
  }

  &__ctrl {
    display: flex;
    justify-content: flex-end;
    width: 100%;
    height: 60px;
    padding: 15px;
    line-height: 30px;
    font-size: 14px;
    color: #454545;
    text-align: right;

    button {
      min-width: 64px;
      height: 30px;
      padding: 0 10px;
      margin: 0 5px;
      border: 1px solid nth($cp, 3);
      border-radius: 4px;
      white-space: nowrap;
      background: #fff;
      font-size: inherit;
      outline: none;
      color: inherit;

      &:hover {
        background: nth($cp, 1);
      }

      &:active {
        border-color: nth($cgr, 1);
      }

      &:last-child {
        color: #fff;
        background: nth($ct, 2);
        border-color: transparent;

        &:hover {
          background: nth($ct, 1);
        }
        &:active {
          background: nth($ct, 3);
        }
      }

      &::-moz-focus-inner {
        border: none;
      }
    }
  }
}

:host([mask]) {
  position: fixed;
  z-index: 65534;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(5px);
}

:host([type='alert']),
:host([type='confirm']),
:host([type='prompt']) {
  .layer {
    max-width: 600px;
    min-width: 300px;
    background: #fff;

    &__content {
      padding: 0 15px;
    }
  }
}
:host([type='toast']) {
  .layer {
    box-shadow: none;

    &__content {
      min-height: 40px;
    }
  }
}
</style>

<script>
import '../form/input'
import Drag from '../drag/core'

import { nextTick, bind, unbind, clickOutside } from '../utils'

const LANGUAGES = {
  en: {
    TITLE: 'Dialog',
    BTNS: ['Cancel', 'OK'],
    ERROR: 'The layer instance is not exists'
  },
  zh: {
    TITLE: '提示',
    BTNS: ['取消', '确定'],
    ERROR: '要关闭的layer实例不存在'
  }
}
LANGUAGES['zh-CN'] = LANGUAGES.zh
const lang =
  LANGUAGES[window.__ENV_LANG__ || navigator.language] || LANGUAGES.en

let unique = null // 储存当前打开的alert/confirm/prompt类型的弹窗
let toastCount = 0

// 要保证弹层唯一的类型
const UNIQUE_TYPES = ['alert', 'confirm', 'prompt']

function renderBtns(list) {
  var html = ''
  list.forEach((t, i) => {
    html += `<button data-idx="${i}"">${t || lang.BTNS[i]}</button>`
  })

  return html
}

class Layer {
  props = {
    btns: [],
    type: 'msg',
    title: '',
    fixed: false //是否固定位置
  }

  __init__() {
    /* render */

    this.__TITLE__ = this.root.children[1].firstElementChild
    this.__BODY__ = this.root.children[1].children[1]
    this.__CTRL__ = this.root.children[1].lastElementChild

    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve
      this.reject = reject
    })
  }

  set title(val) {
    if (val) {
      this.__TITLE__.textContent = val
      this.__TITLE__.style.display = ''
    } else {
      this.__TITLE__.style.display = 'none'
    }
  }

  set type(val) {
    var { btns } = this.props

    if (this._handleBtnClick) {
      return
    }

    switch (val) {
      case 'alert':
        while (btns.length > 1) {
          btns.splice(0, 1)
        }
        break
      case 'confirm':
      case 'prompt':
        while (btns.length > 2) {
          btns.splice(0, 1)
        }
        break
      case 'toast':
      case 'frame':
        btns = []
        break
      default:
        val = 'common'
        break
    }
    this.props.type = val
    if (btns.length) {
      this.__CTRL__.innerHTML = renderBtns(btns)
      this.__CTRL__.style.display = ''
    } else {
      this.__CTRL__.style.display = 'none'
    }

    this.setAttribute('type', val)
  }

  set fixed(val) {
    this.props.fixed = !!val

    this._updateFixedStat()
  }

  _updateFixedStat() {
    // 这3类弹层不允许拖拽
    if (UNIQUE_TYPES.includes(this.props.type)) {
      return
    }

    if (this.props.fixed) {
      if (this._dragIns) {
        this._dragIns.destroy()
        this._dragIns = null
      }
    } else {
      this._dragIns = new Drag(this.root.children[1]).by(this.__TITLE__, {
        overflow: this.props.hasOwnProperty('overflow')
          ? this.props.overflow
          : false
      })
      this.removeAttribute('fixed')
    }
  }

  // 拦截 "确定"按钮的事件
  _intercept(input) {
    if (this.props.intercept) {
      this.props.intercept(input, _ => {
        delete this.props.intercept
        this.resolve(input)
        this.close()
      })
    } else {
      this.resolve(input)
      this.close()
    }
  }

  close() {
    if (this._dragIns) {
      this._dragIns.destroy()
    }
    if (UNIQUE_TYPES.includes(this.props.type)) {
      unique = null
    }
    delete this.promise
    unbind(this.__CTRL__, 'click', this._handleBtnClick)

    // 离场动画
    if (this.props.from) {
      let _style = 'opacity:0;'
      for (let k in this.props.from) {
        _style += `${k}:${this.props.from[k]};`
      }
      this.root.children[1].style.cssText += _style
      setTimeout(() => {
        this.parentNode.removeChild(this)
        if (this.props.type === 'toast') {
          toastCount--
        }
      }, 200)
    } else {
      this.parentNode.removeChild(this)
    }
  }

  mounted() {
    this._handleBtnClick = bind(this.__CTRL__, 'click', ev => {
      if (ev.target.tagName === 'BUTTON') {
        var idx = +ev.target.dataset.idx
        var { type } = this.props

        switch (type) {
          case 'alert':
            this.resolve()
            this.close()
            break
          case 'confirm':
          case 'prompt':
            if (idx === 0) {
              this.reject()
              this.close()
            } else {
              let inputValue = type === 'prompt' ? this.__INPUT__.value : null
              this._intercept(inputValue)
            }
            break

          default:
            // 其他类型, 如有按钮, 直接交给拦截器处理
            this._intercept(idx)
            break
        }
      }
    })

    if (this.props.type === 'prompt') {
      this.__INPUT__ = this.__BODY__.firstElementChild.assignedNodes().pop()
      this._handleSubmit = bind(this.__INPUT__, 'submit', ev => {
        this._intercept(ev.detail)
      })
    }

    this._updateFixedStat()

    /* ------------------------ */
    /* ----    额外的样式     --- */
    /* ------------------------ */
    if (this.props.mask) {
      this._handlMask = clickOutside(this.root.children[1], ev => {
        if (this.props.maskClose) {
          this.reject(null)
          this.close()
        } else {
          if (UNIQUE_TYPES.includes(this.props.type)) {
            this.root.children[1].classList.toggle('scale', true)
            setTimeout(_ => {
              this.root.children[1].classList.remove('scale')
            }, 100)
          }
        }
      })

      if (this.props.maskColor) {
        this.style.backgroundColor = this.props.maskColor
      }
    }

    if (this.props.blur) {
      this.root.children[1].classList.toggle('blur', true)
    }

    let _style = ''

    if (this.props.background) {
      _style += `background: ${this.props.background};`
    }
    if (this.props.radius || this.props.radius === 0) {
      _style += `border-radius: ${this.props.radius};`
    }

    if (this.props.size) {
      for (let k in this.props.size) {
        _style += `${k}:${this.props.size[k]};`
      }
    }

    if (this.props.from) {
      for (let k in this.props.from) {
        _style += `${k}:${this.props.from[k]};`
      }
      // 进场动画
      setTimeout(_ => {
        let _nextStyle = 'opacity:1;'
        for (let k in this.props.to) {
          _nextStyle += `${k}:${this.props.to[k]};`
        }
        this.root.children[1].style.cssText += _nextStyle
      }, 50)
    }

    if (_style) {
      this.root.children[1].style.cssText += _style
    }

    if (this.props.type === 'toast') {
      setTimeout(() => {
        this.close()
      }, this.props.timeout)
    }
  }

  unmount() {
    unbind(document, 'mousedown', this._handlMask)
  }

  watch() {
    switch (name) {
      case 'title':
      case 'type':
        this[name] = val
        break
      case 'fixed':
        this.fixed = true
        break
    }
  }
}

function createLayer(opt) {
  var layDom = document.createElement('wc-layer')

  if (opt.type === 'toast') {
    var { timeout, type, content } = opt
    timeout = timeout >>> 0
    if (timeout < 1) {
      timeout = 2500
    }
    opt = {
      timeout,
      type,
      content,
      from: { top: `${toastCount * 50}px` },
      to: { top: `${(toastCount + 1) * 50 - 30}px` }
    }
    toastCount++
  } else {
    if (opt.mask) {
      layDom.setAttribute('mask', '')
    }

    if (opt.btns === false) {
      layDom.props.btns = []
    } else if (opt.btns && opt.btns.length) {
      layDom.props.btns = opt.btns
    } else {
      layDom.props.btns = lang.BTNS.concat()
    }

    if (opt.intercept && typeof opt.intercept === 'function') {
      layDom.props.intercept = opt.intercept
    }

    layDom.props.mask = opt.mask
    layDom.props.maskClose = opt.maskClose

    if (opt.hasOwnProperty('overflow')) {
      layDom.props.overflow = opt.overflow
    }

    /* 额外样式 */
    layDom.props.maskColor = opt.maskColor

    layDom.props.blur = opt.blur

    layDom.props.radius = opt.radius
    layDom.props.background = opt.background

    if (opt.size && typeof opt.size === 'object') {
      layDom.props.size = opt.size
    }
  }

  layDom.title = opt.title
  layDom.props.timeout = timeout

  if (opt.to && typeof opt.to === 'object') {
    layDom.props.to = opt.to
    if (opt.from && typeof opt.from === 'object') {
      layDom.props.from = opt.from
    } else {
      layDom.props.from = opt.to
    }
  }

  layDom.type = opt.type
  layDom.innerHTML = opt.content
  document.body.appendChild(layDom)

  // 这3种类型, 只允许同时存在1个, 如果之前有弹出则关闭
  if (UNIQUE_TYPES.includes(opt.type)) {
    if (unique) {
      unique.close()
    }
    unique = layDom
  }
  return layDom.promise
}

const _layer = function(opt) {
  if (typeof opt === 'string') {
    opt = 'layerwrap-' + opt
    if (!layerObj[opt]) {
      throw new Error(lang.ERROR)
    } else {
      //只能显示一个实例
      if (layerObj[opt].show) {
        return opt
      }
      layerObj[opt].show = true

      layerObj[opt].parentElem.appendChild(layerDom[opt][0])
      layerDom[opt][0]
        .querySelector('.layer-content')
        .appendChild(layerObj[opt].wrap)
      layerObj[opt].wrap.style.display = ''

      if (!Anot.vmodels[opt]) {
        Anot(layerObj[opt].obj.init)
      }
      layerObj[opt].obj.show()
      return opt
    }
  } else {
    return createLayer(opt)
  }
}

Object.defineProperty(_layer, '__map__', {
  value: {},
  writable: true,
  enumerable: false,
  configurable: true
})

Object.assign(_layer, {
  alert(content, title = lang.TITLE) {
    return createLayer({
      type: 'alert',
      title,
      content,
      fixed: true,
      mask: true
    })
  },
  confirm(content, title = lang.TITLE, intercept) {
    if (typeof title === 'function') {
      intercept = title
      title = lang.TITLE
    }
    return createLayer({
      type: 'confirm',
      title,
      content,
      fixed: true,
      mask: true,
      intercept
    })
  },
  prompt(title = lang.TITLE, intercept) {
    return createLayer({
      type: 'prompt',
      title,
      content: `<wc-input autofocus class="layer__content__input"></wc-input>`,
      fixed: true,
      mask: true,
      intercept
    })
  },
  frame(url, extra = {}) {
    return createLayer({
      ...extra,
      type: 'frame',
      content: `<iframe class="layer__content__frame" src="${url}"></iframe>`,
      fixed: true,
      mask: true,
      maskClose: true
    })
  },
  toast(txt, type = 'info', timeout = 2500) {
    if (typeof type === 'number') {
      timeout = type
      type = 'info'
    }
    switch (type) {
      case 'info':
      case 'warn':
      case 'error':
        break
      default:
        type = 'info'
    }

    return createLayer({
      content: `
      <div class="layer__content__toast style-${type}">
        <wc-icon size="mini" is="${type}"></wc-icon>
        ${txt}
      </div>`,
      type: 'toast',
      timeout
    })
  }
})

window.layer = _layer

export default _layer
</script>
