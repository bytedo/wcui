<template>
  <div class="layer">
    <div class="layer__title noselect"></div>
    <div class="layer__content"><slot></slot></div>
    <div class="layer__ctrl noselect"></div>
  </div>
</template>
<style lang="scss">
:host {
  display: flex;
  justify-content: center;
  align-items: center;
  width: auto;
  height: auto;
}
.noselect {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
  img,
  a {
    -webkit-user-drag: none;
  }
}

.layer {
  flex: 0 auto;
  position: absolute;
  z-index: 65535;
  // padding: 15px 10px;
  border-radius: 3px;
  color: #666;
  font-size: 14px;
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
  // opacity: 0;

  &.shift {
    transition: all 0.5s ease-out;
  }
  &.scale {
    transform: scale(1.02);
    transition: transform 0.1s linear;
  }
  &.blur {
    backdrop-filter: blur(5px);
  }

  &:active {
    z-index: 65536;
  }

  /* 弹层样式 */

  &__title {
    width: 100%;
    height: 60px;
    padding: 15px;
    line-height: 30px;
    font-size: 16px;
    color: nth($cd, 2);
  }

  &__content {
    position: relative;
    width: 100%;
    height: auto;
    min-height: 50px;
    word-break: break-all;
    word-wrap: break-word;
  }

  &__ctrl {
    display: flex;
    flex-direction: row-reverse;
    width: 100%;
    height: 60px;
    padding: 15px;
    line-height: 30px;
    font-size: 14px;
    color: #454545;
    text-align: right;

    button {
      min-width: 64px;
      height: 30px;
      padding: 0 10px;
      margin: 0 5px;
      border: 1px solid nth($cp, 3);
      border-radius: 4px;
      white-space: nowrap;
      background: #fff;
      font-size: inherit;
      outline: none;
      color: inherit;

      &:hover {
        background: nth($cp, 1);
      }

      &:active {
        border-color: nth($cgr, 1);
      }

      &:last-child {
        color: #fff;
        background: nth($ct, 2);
        border-color: transparent;

        &:hover {
          background: nth($ct, 1);
        }
        &:active {
          background: nth($ct, 3);
        }
      }

      &::-moz-focus-inner {
        border: none;
      }
    }
  }
}

:host([mask]) {
  position: fixed;
  z-index: 65534;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(5px);

  &.shift {
    transition: all 0.5s ease-out;
  }
  &.inner {
    position: absolute;
  }
}

:host([type='alert']),
:host([type='confirm']),
:host([type='prompt']) {
  .layer {
    max-width: 600px;
    min-width: 300px;
    background: #fff;

    &__content {
      padding: 0 15px;
    }
  }
}
</style>

<script>
import Drag from '../drag/core'

import { nextTick, bind, unbind, clickOutside } from '../utils'

const LANGUAGES = {
  en: {
    TITLE: 'Dialog',
    BTNS: ['Cancel', 'OK'],
    YES_BTN: 'OK',
    NO_BTN: 'Cancel',
    ERROR: 'The layer instance is not exists',
    NEED_CONTAINER: 'layer "tips" require a DOM object as container'
  },
  zh: {
    TITLE: '提示',
    BTNS: ['取消', '确定'],
    YES_BTN: '确定',
    NO_BTN: '取消',
    ERROR: '要关闭的layer实例不存在',
    NEED_CONTAINER: 'tips类型需要指定一个元素节点作为容器'
  }
}
LANGUAGES['zh-CN'] = LANGUAGES.zh
const lang =
  LANGUAGES[window.__ENV_LANG__ || navigator.language] || LANGUAGES.en

let unique = null // 储存当前打开的1/2/3类型的弹窗
let lid = 0
let defconf = {
  type: 1, // 弹窗类型
  background: '#fff',
  mask: true, // 遮罩
  maskClose: false, // 遮罩点击关闭弹窗
  maskColor: null, // 遮罩背景色
  radius: '0px', // 弹窗圆角半径
  area: ['auto', 'auto'],
  title: lang.TITLE, // 弹窗主标题(在工具栏上的)
  menubar: true, // 是否显示菜单栏
  content: '', // 弹窗的内容
  fixed: false, // 是否固定不可拖拽
  shift: {}, // 弹窗出来的初始位置,用于出场动画
  offset: {} // 弹窗出来后的坐标, 为数组,可有4个值,依次是 上右下左
}

const uuid = function() {
  return 'layer-' + lid++
}
// 要保证弹层唯一的类型
const UNIQUE_TYPES = ['alert', 'confirm', 'prompt']

const fixOffset = function(offset) {
  for (let i in offset) {
    if (offset[i] === 'auto' || (!offset[i] && offset[i] !== 0)) {
      delete offset[i]
    } else {
      if (isFinite(offset[i])) {
        offset[i] += 'px'
      }
    }
  }
  return offset
}

/* type: { // 弹窗类型对应的id值
  1: 'alert',
  2: 'confirm',
  3: 'prompt',
  4: 'iframe',
  5: 'tips',
  6: 'loading',
  7: 'msg',
} */

function createLayer(opt) {
  var layDom = document.createElement('wc-layer')
  layDom.type = opt.type
  if (opt.mask) {
    layDom.setAttribute('mask', '')
  }

  if (opt.title) {
    layDom.title = opt.title
  }

  layDom.innerHTML = opt.content
  document.body.appendChild(layDom)

  return layDom
}

const _layer = {
  alert(content, title) {
    return createLayer({
      type: 'alert',
      title: title || 'Hello world!',
      content:
        content || '<p>blablablablsjkdjbskj fghjsdgfjs djfhjsdgf jhs jhj</p>',
      fixed: true,
      mask: true
    })
  },
  confirm(content, title) {
    return createLayer({
      type: 'confirm',
      title: title || 'Hello world!',
      content: content || 'blablablablsjkdjbskj fghjsdgfjs djfhjsdgf jhs jhj',
      fixed: true,
      mask: true
    })
  },
  frame(url, extra = {}) {
    return createLayer({
      type: 'frame',
      content: `<iframe ref="frame" class="frame-box" src="${url}"></iframe>`,
      fixed: true,
      mask: true,
      maskClose: true
    })
  },
  toast(txt, type = 'info', timeout = 2500) {
    if (typeof type === 'number') {
      timeout = type
      type = 'info'
    }
    switch (type) {
      case 'info':
        break
      case 'warn':
        break
      case 'error':
        type = 'deny'
        break
      default:
        type = 'info'
    }

    let opt = {
      content: `
      <mark class="toast-box style-${type}">
        <i class="do-icon-${type}"></i>
        ${txt}
      </mark>`,
      menubar: false,
      mask: false,
      type: 7,
      shift: { top: 0 },
      timeout,
      offset: { top: 50 },
      fixed: true,
      toast: true // toast模式
    }

    return _layer.open(opt)
  },
  prompt(title, yescb) {
    if (typeof yescb !== 'function') {
      return console.error(
        'argument [callback] requires a function, but ' +
          typeof yescb +
          ' given'
      )
    }
    let opt = {
      type: 3,
      prompt: '',
      title,
      content: `<input class="prompt-value" ref="input" :class="{alert: !prompt}" :duplex="prompt" />`,
      fixed: true,
      yes: yescb
    }
    return _layer.open(opt)
  },
  close: close,
  open(opt) {
    if (typeof opt === 'string') {
      opt = 'layerwrap-' + opt
      if (!layerObj[opt]) {
        throw new Error(lang.ERROR)
      } else {
        //只能显示一个实例
        if (layerObj[opt].show) {
          return opt
        }
        layerObj[opt].show = true

        layerObj[opt].parentElem.appendChild(layerDom[opt][0])
        layerDom[opt][0]
          .querySelector('.layer-content')
          .appendChild(layerObj[opt].wrap)
        layerObj[opt].wrap.style.display = ''

        if (!Anot.vmodels[opt]) {
          Anot(layerObj[opt].obj.init)
        }
        layerObj[opt].obj.show()
        return opt
      }
    } else {
      return new __layer__(opt).init.$id
    }
  },
  version: Anot.ui.layer
}

/* Anot.directive('layer', {
  priority: 8090,
  init: function(binding) {
    // 去掉:layer属性,避免二次扫描
    binding.element.removeAttribute(binding.name)
    if (!binding.param || binding.param !== 'tips') {
      binding.param = '' // 去掉param,保证之后的逻辑处理正常
      binding.element.style.display = 'none'
    }
  },
  update: function(val) {
    if (!val) {
      return console.error(
        `SyntaxError: Unexpected [${this.name}=${this.expr}]`
      )
    }

    let state = Object.assign({ type: 7, wrap: true }, this.element.dataset)

    if (!this.param) {
      let init = { $id: 'layerwrap-' + val, state, props: {} }

      if (state.hasOwnProperty('area')) {
        state.area = state.area.split(',')
      }
      if (state.hasOwnProperty('shift')) {
        state.shift = fixOffset(new Function(`return ${state.shift}`)())
      }

      if (state.hasOwnProperty('offset')) {
        state.offset = fixOffset(new Function(`return ${state.offset}`)())
      }

      if (state.hasOwnProperty('btns')) {
        state.btns = state.btns.split(',')
      }

      if (!state.hasOwnProperty('menubar')) {
        state.menubar = false
      }

      let tmp = new __layer__().__init__(init)

      //去掉data-*属性
      for (let i in this.element.dataset) {
        delete this.element.dataset[i]
      }

      layerObj[tmp.init.$id] = {
        obj: tmp,
        parentElem: this.element.parentNode,
        wrap: this.element,
        show: false
      }
      layerDom[tmp.init.$id] = tmp.create()
    } else if (this.param === 'tips') {
      let tips = document.createElement('div')
      let cont = document.createElement('span')
      let arrow = document.createElement('i')
      let $container = Anot(this.element)
      let { position } = getComputedStyle(this.element)

      tips.className = 'do-layer__tips'
      cont.className = 'layer-content'
      arrow.className = 'arrow'
      cont.textContent = val
      tips.appendChild(cont)
      tips.appendChild(arrow)

      if (position === 'static') {
        this.element.style.position = 'relative'
      }
      this.element.appendChild(tips)

      let style = {}

      if (state.color) {
        style.color = state.color
      }
      if (state.color) {
        style.background = state.background
      }

      let cw = $container.innerWidth()
      let ch = $container.innerHeight()

      let arrowOffset = ['top']

      // log(tips, layw, layh)
      Anot(tips).css(style)

      $container.bind('mouseenter', ev => {
        let tmpStyle = { visibility: 'visible' }
        let layw = tips.clientWidth
        let layh = tips.clientHeight
        let { left, top } = $container.offset()
        let ol = left - $doc.scrollLeft()
        let ot = top - $doc.scrollTop()

        // 判断位置是以确定出现 在上还是在下
        if (ot < layh + 8) {
          arrowOffset[0] = 'bottom'
          arrow.style.borderBottomColor = state.background
          tmpStyle.bottom = ''
          tmpStyle.top = ch + 8
        } else {
          arrow.style.borderTopColor = state.background
          tmpStyle.top = ''
          tmpStyle.bottom = ch + 8
        }

        if (ol + cw * 0.7 + layw > window.innerWidth) {
          tmpStyle.left = cw * 0.3 - layw
          arrowOffset[1] = 'left'
        } else {
          tmpStyle.left = cw * 0.7
        }

        arrow.classList.add('offset-' + arrowOffset.join('-'))
        Anot(tips).css(tmpStyle)
      })
      $container.bind('mouseleave', () => {
        setTimeout(() => {
          arrow.classList.remove('offset-' + arrowOffset.join('-'))
          arrowOffset = ['top']
          arrow.style.borderBottomColor = ''
          arrow.style.borderTopColor = ''
          tips.style.visibility = 'hidden'
        }, 100)
      })
    }
  }
}) */

window.layer = _layer

function renderBtns(list) {
  var html = ''
  list.forEach((t, i) => {
    html += `<button data-idx="${i}"">${t || lang.BTNS[i]}</button>`
  })

  return html
}

export default class Layer {
  props = {
    type: 'msg',
    title: '',
    fixed: false //是否固定位置
  }

  __init__() {
    /* render */

    this.__TITLE__ = this.root.children[1].firstElementChild
    this.__BODY__ = this.root.children[1].children[1]
    this.__CTRL__ = this.root.children[1].lastElementChild
  }

  set title(val) {
    this.__TITLE__.textContent = val || lang.TITLE
  }

  set type(val) {
    this.props.type = val

    switch (val) {
      case 'alert':
        this.__CTRL__.innerHTML = renderBtns(['确定'])
        break
      case 'confirm':
      case 'prompt':
        this.__CTRL__.innerHTML = renderBtns(['取消', '确定'])
        break
      case 'toast':
        break
      case 'frame':
        break
      default:
        val = 'common'
        if (this.opt.btns) {
          this.__CTRL__.innerHTML = renderBtns(this.opt.btns)
          break
        }
    }

    this.setAttribute('type', val)
  }

  get fixed() {
    return this.props.fixed
  }

  set fixed(val) {
    this.props.fixed = !!val

    // 这3类弹层不允许拖拽
    if (UNIQUE_TYPES.includes(this.props.type)) {
      return
    }

    if (this.props.fixed) {
      if (this._dragIns) {
        this._dragIns.destroy()
        this._dragIns = null
      }
    } else {
      this._dragIns = new Drag(this.root.children[1]).by(this.__TITLE__, {
        overflow: false
      })
      this.removeAttribute('fixed')
    }
  }

  close() {
    if (this._dragIns) {
      this._dragIns.destroy()
    }
    this.parentNode.removeChild(this)
  }

  mounted() {
    bind(this.__CTRL__, 'click', ev => {
      if (ev.target.tagName === 'BUTTON') {
        var idx = +ev.target.dataset.idx
        log(idx)
        this.close()
      }
    })
  }

  unmount() {}

  watch() {
    switch (name) {
      case 'title':
      case 'type':
        this[name] = val
        break
      case 'fixed':
        this.fixed = true
        break
    }
  }
}
</script>
