<template>
  <div class="layout">
    <wc-button
      color="plain"
      data-page="1"
      class="home"
      icon="dbl-left"
    ></wc-button>
    <wc-button data-page="prev" class="prev" icon="left"></wc-button>
    <div class="pager"></div>
    <wc-button data-page="next" class="next" icon="right"></wc-button>
    <wc-button data-page="end" class="end" icon="dbl-right"></wc-button>
  </div>
</template>

<style lang="scss">
:host {
  display: block;
  line-height: 1;
  color: var(--color-dark-1);
  font-size: 14px;
  user-select: none;
  -moz-user-select: none;

  .layout,
  .pager {
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .layout {
    margin: 10px auto;
  }

  wc-button {
    min-width: 32px;
    // height: 32px;
    --padding: 0;
    margin: 0 3px;
    --icon-size: 14px;

    &:hover {
      background: var(--color-plain-2);
    }

    &[curr] {
      background: var(--color-teal-1);
      color: #fff;
    }
  }
}

:host([simple]) {
  .home,
  .end {
    display: none;
  }
}

:host([circle]) button {
  border-radius: 50%;
}

:host([type='danger']) button[curr] {
  background: var(--color-red-1);
}

:host([type='info']) button[curr] {
  background: var(--color-blue-1);
}

:host([type='success']) button[curr] {
  background: var(--color-green-1);
}

:host([type='primary']) button[curr] {
  background: var(--color-teal-1);
}

:host([color='orange']) button[curr] {
  background: var(--color-orange-1);
}

:host([type='inverse']) button[curr] {
  background: var(--color-dark-1);
}

:host([color='purple']) button[curr] {
  background: var(--color-purple-1);
}
</style>

<script>
import $ from '../utils'
import '../form/button'

// 计算页码
function calculate(curr, total, simple) {
  var arr = []
  var fixed = 0
  var half = curr < 3 ? 6 - curr : 2 // 中间页码

  // 总页码小于2, 或者简单模式下
  if (total < 2 || simple) {
    arr.push({ to: curr, txt: curr })
    return arr
  }

  // 当前页面比半数多时, 前面的用省略号代替
  if (curr - half > 1 && total > 5) {
    var to = curr - 2 * half
    to = to < 1 ? 1 : to
    arr.push({ to, txt: '...' })
  }

  if (total - curr < half) {
    fixed = half - total + curr
  }

  // 把页码拆成2部分来
  for (var i = curr - half - fixed; i < curr + half + 1 && i <= total; i++) {
    if (i > 0) {
      arr.push({ to: i, txt: i })
    }
  }

  // 总页码太多时, 以省略号代替
  if (curr + half < total) {
    var to = curr + 2 * half
    to = to > total ? total : to
    arr.push({ to, txt: '...' })
  }

  return arr
}
//
export default class Pager {
  props = {
    layout: 'home, prev, next, end',
    total: 0,
    curr: 1,
    pagesize: 20,
    simple: false
  }
  __init__() {
    /* render */

    this.__LAYOUT__ = this.root.children[1]
    this.__HOME__ = this.__LAYOUT__.children[0]
    this.__PREV__ = this.__LAYOUT__.children[1]
    this.__PAGE__ = this.__LAYOUT__.children[2]
    this.__NEXT__ = this.__LAYOUT__.children[3]
    this.__END__ = this.__LAYOUT__.children[4]
  }

  update() {
    var { curr, totalpage, simple } = this.props

    var list = calculate(curr, totalpage, simple)

    this.__PAGE__.innerHTML = list
      .map(
        it =>
          `<wc-button ${curr === it.to ? 'color="teal"' : ''} data-page="${
            it.to
          }">${it.txt}</wc-button>`
      )
      .join('')
  }

  mounted() {
    var { pagesize, total } = this.props
    this.props.totalpage = Math.ceil(total / pagesize)

    this.update()

    $.bind(this.__LAYOUT__, 'click', ev => {
      if (ev.target.tagName === 'WC-BUTTON') {
        var { curr, totalpage } = this.props
        var page = ev.target.dataset.page
        var num = +page
        if (num === num) {
          if (num === curr) {
            return
          }
        } else {
          switch (page) {
            case 'prev':
              num = curr - 1
              if (num < 1) {
                return
              }
              break
            case 'next':
              num = curr + 1
              if (num > totalpage) {
                return
              }
              break
            case 'end':
              if (totalpage === curr) {
                return
              }
              num = totalpage
              break
          }
        }
        this.props.curr = num
        this.update()
        this.dispatchEvent(
          new CustomEvent('pick', {
            detail: num
          })
        )
      }
    })
  }

  watch() {
    switch (name) {
      case 'total':
      case 'pagesize':
      case 'curr':
        this.props[name] = +val || this.props[name]
        var { pagesize, total } = this.props
        this.props.totalpage = Math.ceil(total / pagesize)
        this.update()
        break

      case 'simple':
        this.props.simple = true
        break
    }
  }
}
</script>
