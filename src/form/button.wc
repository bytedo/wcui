<template>
  <button>
    <wc-icon class="icon"></wc-icon>
    <slot />
  </button>
</template>

<style lang="scss">
:host {
  overflow: hidden;
  display: inline-flex;
  min-width: 128px;
  height: 36px;
  border-radius: 3px;
  user-select: none;
  -moz-user-select: none;
  color: var(--color-dark-1);
  font-size: 14px;
  cursor: pointer;
  transition: box-shadow 0.15s linear;

  button {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    width: 100%;
    height: inherit;
    padding: var(--padding, 0 14px);
    line-height: 1;
    border: 1px solid var(--color-grey-2);
    border-radius: inherit;
    white-space: nowrap;
    background: #fff;
    font-size: inherit;
    font-family: inherit;
    outline: none;
    color: inherit;
    cursor: inherit;
    transition: background 0.15s linear;

    &::-moz-focus-inner {
      border: none;
    }
  }

  .icon {
    --size: var(--icon-size, 18px);
  }
}

:host([size='large']) {
  min-width: 212px;
  height: 52px;
  font-size: 18px;

  button {
    padding: 0 24px;
  }

  .icon {
    --size: 26px;
  }
}
:host([size='large'][circle]) {
  min-width: 52px;
  width: 52px;
  height: 52px;

  button {
    padding: 0;
  }
}
:host([size='medium']) {
  min-width: 160px;
  height: 44px;

  button {
    padding: 0 18px;
  }
}
:host([size='medium'][circle]) {
  min-width: 44px;
  width: 44px;
}
:host([size='small']) {
  min-width: 96px;
  height: 32px;
}
:host([size='small'][circle]) {
  min-width: 32px;
  width: 32px;
}
:host([size='mini']) {
  min-width: 72px;
  height: 26px;
  font-size: 12px;

  button {
    padding: 0 6px;
  }

  .icon {
    --size: 14px;
  }
}
:host([size='mini'][circle]) {
  min-width: 26px;
  width: 26px;
}

:host([round]) {
  border-radius: 26px;
}
:host([circle]) {
  min-width: 36px;
  width: 36px;
  border-radius: 50%;
  button {
    padding: 0;
  }
  .icon {
    margin-right: 0;
  }

  slot {
    display: none;
  }
}

:host([type]) {
  color: #fff;
  button {
    border: 0;
  }
}

:host(:not([disabled]):not([loading])) button {
  &:hover {
    border-color: var(--color-grey-1);
  }
  &:active {
    border-color: var(--color-grey-3);
  }
}
:host(:focus-within) {
  box-shadow: 0 0 0 2px var(--color-plain-a);
}

// -------------
:host([type='danger']) button {
  background: var(--color-red-2);
}
:host([type='danger']:not([disabled]):not([loading])) button {
  &:hover {
    background: var(--color-red-1);
  }
  &:active {
    background: var(--color-red-3);
  }
}
:host([type='danger']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-red-a);
}

// -------------
:host([type='info']) button {
  background: var(--color-blue-2);
}
:host([type='info']:not([disabled]):not([loading])) button {
  &:hover {
    background: var(--color-blue-1);
  }
  &:active {
    background: var(--color-blue-3);
  }
}
:host([type='info']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-blue-a);
}

// --------
:host([type='success']) button {
  background: var(--color-green-2);
}
:host([type='success']:not([disabled]):not([loading])) button {
  &:hover {
    background: var(--color-green-1);
  }
  &:active {
    background: var(--color-green-3);
  }
}
:host([type='success']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-green-a);
}

// ---------
:host([type='primary']) button {
  background: var(--color-teal-2);
}
:host([type='primary']:not([disabled]):not([loading])) button {
  &:hover {
    background: var(--color-teal-1);
  }
  &:active {
    background: var(--color-teal-3);
  }
}
:host([type='primary']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-teal-a);
}

// ----------
:host([type='warning']) button {
  background: var(--color-orange-2);
}
:host([type='warning']:not([disabled]):not([loading])) button {
  &:hover {
    background: var(--color-orange-1);
  }
  &:active {
    background: var(--color-orange-3);
  }
}
:host([type='warning']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-orange-a);
}

// -------
:host([type='inverse']) button {
  background: var(--color-dark-2);
}
:host([type='inverse']:not([disabled]):not([loading])) button {
  &:hover {
    background: var(--color-dark-1);
  }
  &:active {
    background: var(--color-dark-3);
  }
}
:host([type='inverse']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-dark-a);
}

// -------
:host([type='help']) button {
  background: var(--color-grey-2);
}
:host([type='help']:not([disabled]):not([loading])) button {
  &:hover {
    background: var(--color-grey-1);
  }
  &:active {
    background: var(--color-grey-3);
  }
}
:host([type='help']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-grey-a);
}

:host([loading]),
:host([disabled]) {
  cursor: not-allowed;
  opacity: 0.6;
}
</style>

<script>
import '../icon/index'
import $ from '../utils'

const IS_FIREFOX = !!window.sidebar

export default class Button {
  props = {
    icon: '',
    autofocus: '',
    loading: false,
    disabled: false,
    lazy: 0 // 并发拦截时间, 单位毫秒
  }

  __init__() {
    /* render */

    // 圆形按钮不允许文字
    if (this.hasAttribute('circle')) {
      this.textContent = ''
    }

    this.__BTN__ = this.root.children[1]
    this.__ICO__ = this.__BTN__.children[0]
  }

  get loading() {
    return this.props.loading
  }

  set loading(val) {
    var type = typeof val

    if (val === this.props.loading) {
      return
    }

    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.loading = true
      this.__BTN__.disabled = true
      this.__ICO__.setAttribute('is', 'loading')
      this.setAttribute('loading', '')
    } else {
      this.props.loading = false
      this.__BTN__.disabled = false
      this.__ICO__.setAttribute('is', this.props.icon)
      this.removeAttribute('loading')
    }
  }

  get disabled() {
    return this.props.disabled
  }

  set disabled(val) {
    var type = typeof val

    if (val === this.props.disabled) {
      return
    }
    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.disabled = true
      this.__BTN__.disabled = true
      this.setAttribute('disabled', '')
    } else {
      this.props.disabled = false
      this.__BTN__.disabled = false
      this.removeAttribute('disabled')
    }
  }

  mounted() {
    this.stamp = 0

    // 阻止事件冒泡, 避免用户自己绑定click事件不受这2个值的限制
    this._handleClick = $.bind(
      this,
      'click',
      ev => {
        var { loading, disabled, lazy } = this.props
        var now = Date.now()

        if (loading || disabled) {
          return ev.stopPropagation()
        }
        // 并发拦截
        if (lazy && now - this.stamp < lazy) {
          return ev.stopPropagation()
        }
        this.stamp = now
      },
      true
    )
  }

  unmounted() {
    $.unbind(this, 'click', this._handleClick)
  }

  watch() {
    switch (name) {
      case 'icon':
        this.props.icon = val
        if (val) {
          if (!this.props.loading) {
            this.__ICO__.setAttribute('is', val)
          }
        } else {
          this.removeAttribute('icon')
          this.__ICO__.removeAttribute('is')
        }
        break

      case 'autofocus':
        this.__BTN__.setAttribute('autofocus', '')
        // 辣鸡火狐, 要触发一下focus, 才能聚焦
        if (IS_FIREFOX) {
          setTimeout(_ => {
            this.__BTN__.focus()
          }, 10)
        }
        break

      //
      case 'lazy':
        this.props.lazy = val >> 0
        break

      case 'loading':
      case 'disabled':
        this[name] = val !== null
        break
    }
  }
}
</script>
