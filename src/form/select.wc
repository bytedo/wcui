<template>
  <div class="label">
    <slot class="prepend" name="prepend"></slot>
    <input readonly />
    <wc-icon class="arrow" is="left"></wc-icon>
    <slot class="append" name="append"></slot>
    <div class="opt-box">
      <wc-scroll>
        <dl class="list"></dl>
      </wc-scroll>
    </div>
  </div>
</template>

<style lang="scss">
:host {
  overflow: hidden;
  display: inline-block;
  user-select: none;
  -moz-user-select: none;
  color: nth($cd, 2);
  border-radius: 4px;
}
.label {
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 64px;
  width: 100%;
  height: 32px;
  font-size: 14px;
  border: 1px solid nth($cp, 3);
  border-radius: inherit;
  background: #fff;
  color: inherit;
  cursor: default;

  input {
    flex: 1;
    width: 0;
    min-width: 64px;
    width: 0;
    height: 100%;
    padding: 0 5px;
    border: 0;
    border-radius: inherit;
    color: inherit;
    font-size: inherit;
    background: none;
    outline: none;
    box-shadow: none;
    cursor: inherit;

    &::placeholder {
      color: nth($cgr, 1);
    }
  }

  .prepend,
  .append {
    display: none;
    justify-content: center;
    align-items: center;
    width: auto;
    height: 30px;
    padding: 0 10px;
    background: nth($cp, 1);
  }
  .prepend {
    border-right: 1px solid nth($cp, 3);
    border-radius: 4px 0 0 4px;
  }
  .append {
    border-left: 1px solid nth($cp, 3);
    border-radius: 0 4px 4px 0;
  }
  &[prepend] .prepend,
  &[append] .append {
    display: flex;
  }
  /* ----- */
  .arrow {
    padding: 0 5px;
    --size: 14px;
    color: #ddd;
    transform: rotate(-90deg);
  }
}

.opt-box {
  display: none;
  position: fixed;
  z-index: 10260;
  left: 0;
  top: 0;
  width: 200px;
  height: auto;
  max-height: 200px;
  min-height: 46px;
  padding: 8px 0;
  border-radius: 4px;
  background: #fff;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.25);
  cursor: default;

  .list {
    width: 100%;
  }

  &::after {
    position: absolute;
    left: 30px;
    top: -4px;
    width: 8px;
    height: 8px;
    background: #fff;
    box-shadow: -1px -1px 2px rgba(0, 0, 0, 0.1);
    transform: rotate(45deg);
    content: '';
  }
  &.show {
    display: flex;
  }

  dt,
  dd {
    overflow: hidden;
    width: 100%;
    height: 30px;
    line-height: 30px;
    padding: 0 8px;
    text-align: left;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  dt {
    font-size: 12px;
    color: nth($cgr, 1);
  }

  dd {
    cursor: pointer;

    &:hover,
    &[focus] {
      background: nth($cp, 1);
    }
    &[focus] {
      color: nth($ct, 1);
    }
    &[sub] {
      text-indent: 1em;
    }
    &[disabled] {
      color: nth($cgr, 1);
      cursor: not-allowed;
      background: none;
    }
  }
}

/* --- */
:host([disabled]) .label {
  background: nth($cp, 1);
  cursor: not-allowed;
  opacity: 0.6;
}
:host(:focus-within) {
  box-shadow: 0 0 3px nth($ct, 1);
}
:host(:focus-within[readonly]) {
  box-shadow: 0 0 3px nth($co, 1);
}

/* 额外样式 */
:host([round]) {
  border-radius: 21px;

  .prepend {
    border-radius: 21px 0 0 21px;
  }
  .append {
    border-radius: 0 21px 21px 0;
  }
}

:host([size='large']) {
  .label {
    height: 42px;
    font-size: 16px;
  }
  .prepend,
  .append {
    height: 40px;
  }
}

:host([size='medium']) {
  .label {
    height: 36px;
  }
  .prepend,
  .append {
    height: 34px;
  }
}
:host([size='mini']) {
  .label {
    height: 24px;
    font-size: 12px;
  }
  .arrow {
    --size: 12px;
  }
  .prepend,
  .append {
    height: 18px;
  }
}
</style>

<script>
import '../scroll/index'
import '../icon/index'
import { ebind, bind, unbind, clickOutside } from '../utils'

function parseOptions(arr, props) {
  let html = ''
  for (let it of arr) {
    if (it.list) {
      html += `<dt>${it.name}</dt>`
      for (let _ of it.list) {
        props.DICT[_.value] = _
        if (!_.disabled) {
          props.LIST.push(_)
        }
        html += `<dd sub ${
          _.disabled ? 'disabled' : `data-idx="${props.LIST.length - 1}"`
        } ${_.value === props.value ? 'focus' : ''}>${_.label}</dd>`
      }
    } else {
      if (!it.disabled) {
        props.LIST.push(it)
      }
      props.DICT[it.value] = it
      html += `<dd ${
        it.disabled ? 'disabled' : `data-idx="${props.LIST.length - 1}"`
      } ${it.value === props.value ? 'focus' : ''}>${it.label}</dd>`
    }
  }
  return html
}

export default class Select {
  props = {
    label: '',
    placeholder: '',
    multi: '',
    value: '',
    options: '',
    mvidx: null, //下拉列表光标的索引ID
    disabled: false
  }

  constructor() {
    /* render */

    this.__OUTER__ = this.root.children[1]
    this.__PREPEND__ = this.__OUTER__.children[0]
    this.__INPUT__ = this.__OUTER__.children[1]
    this.__ICO__ = this.__OUTER__.children[2]
    this.__APPEND__ = this.__OUTER__.children[3]
    this.__OPTG__ = this.__OUTER__.children[4]
  }

  get disabled() {
    return this.props.disabled
  }

  set disabled(val) {
    var type = typeof val

    if (val === this.props.disabled) {
      return
    }
    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.disabled = true
      this.setAttribute('disabled', '')
      this.__INPUT__.setAttribute('disabled', '')
    } else {
      this.props.disabled = false
      this.removeAttribute('disabled')
      this.__INPUT__.removeAttribute('disabled')
    }
  }

  get value() {
    return this.props.value
  }

  set value(val) {
    var { DICT, active } = this.props
    this.props.value = val
    this.__INPUT__.value = (DICT && DICT[val] && DICT[val].label) || val
    if (!active) {
      this._updateStyle()
    }
  }

  _renderOptions(options) {
    this.props.DICT = {}
    this.props.LIST = []
    var elem = this.__OPTG__.firstElementChild.firstElementChild

    elem.innerHTML = parseOptions(options, this.props)
    this.props.ITEMS = Array.from(elem.children).filter(it => {
      return it.tagName === 'DD' && !it.hasAttribute('disabled')
    })
    this.value = this.props.value
  }

  // 移动光标选择下拉选项
  _moveSelect(ev) {
    var { LIST, DICT, ITEMS } = this.props
    if (LIST && LIST.length) {
      ev.preventDefault()
      var step = ev.keyCode === 38 ? -1 : 1

      if (this.props.mvidx === null) {
        this.props.mvidx = 0
      } else {
        this.props.mvidx += step
      }
      if (this.props.mvidx < 0) {
        this.props.mvidx = 0
      } else if (this.props.mvidx > ITEMS.length - 1) {
        this.props.mvidx = ITEMS.length - 1
      }

      ITEMS.forEach((it, i) => {
        if (i === this.props.mvidx) {
          this.__OPTG__.firstElementChild.scrollTop = it.offsetTop - 150
          it.setAttribute('focus', '')
        } else {
          it.removeAttribute('focus')
        }
      })
    }
  }

  _updateStyle(idx) {
    var { LIST, ITEMS, value } = this.props
    if (LIST && LIST.length) {
      if (idx === undefined) {
        for (let i = -1, it; (it = LIST[++i]); ) {
          if (value === it.value) {
            idx = i
            break
          }
        }
      }
      this.props.mvidx = idx
      ITEMS.forEach((it, i) => {
        if (i === idx) {
          it.setAttribute('focus', '')
        } else {
          it.removeAttribute('focus')
        }
      })
    }
  }

  // 触发列表选择
  _fetchSelect(idx, needUpdateStyle) {
    var item = this.props.LIST[idx]
    this.value = item.value
    this.dispatchEvent(
      new CustomEvent('select', {
        detail: item
      })
    )
    if (needUpdateStyle) {
      this._updateStyle(idx)
    }
    this.props.active = false
    this.__OPTG__.classList.remove('show')
  }

  mounted() {
    var prepend = this.__PREPEND__.assignedNodes()
    var append = this.__APPEND__.assignedNodes()

    // 相同插槽, 只允许1个
    while (prepend.length > 1) {
      this.removeChild(prepend.pop())
    }
    while (append.length > 1) {
      this.removeChild(append.pop())
    }

    if (prepend.length && this.props.type !== 'textarea') {
      this.__OUTER__.setAttribute('prepend', '')
    }
    if (append.length && this.props.type !== 'textarea') {
      this.__OUTER__.setAttribute('append', '')
    }

    function initPos() {
      var { x, y, width } = this.getBoundingClientRect()
      var size = this.getAttribute('size')
      this.props.active = true
      if (size && size === 'mini') {
        y += 32
      } else {
        y += 50
      }
      this.__OPTG__.style.cssText = `left:${x}px;top:${y}px;width:${width}px;`
    }

    /* ---------------------------------------------------- */
    /* -----------------     各种事件     ------------------ */
    /* ---------------------------------------------------- */

    // 键盘事件
    this._handleKeydown = ebind(this.__INPUT__, 'keydown', ev => {
      if (this.disabled || this.readonly) {
        return
      }
      // up: 38, down: 40
      if (ev.keyCode === 38 || ev.keyCode === 40) {
        if (!this.props.active) {
          initPos.call(this)
          this.__OPTG__.classList.toggle('show', true)
          return
        }
        return this._moveSelect(ev)
      }
      // 回车触发select事件
      if (ev.keyCode === 13) {
        if (this.props.mvidx !== null && this.props.active) {
          return this._fetchSelect(this.props.mvidx)
        }
      }
    })

    // 渲染列表
    this._activeFn = bind(this.__INPUT__, 'click', ev => {
      var { options } = this.props

      initPos.call(this)
      this.__OPTG__.classList.toggle('show')
    })

    // 选择选项
    this._handleSelect = bind(this.__OPTG__, 'click', ev => {
      if (ev.target.tagName === 'DD' && !ev.target.hasAttribute('disabled')) {
        this._fetchSelect(+ev.target.dataset.idx, true)
        this.dispatchEvent(new CustomEvent('input'))
      }
    })

    this._inactiveFn = clickOutside(this, ev => {
      this.__OPTG__.classList.toggle('show', false)
      this.props.active = false
    })
  }

  watch(name, old, val) {
    if (old === val) {
      return
    }
    switch (name) {
      // label和placeholder 功能相同
      case 'label':
      case 'placeholder':
        this.__INPUT__.setAttribute('placeholder', val)
        break

      case 'options':
        if (val) {
          try {
            this._renderOptions(JSON.parse(val))
          } catch (err) {}
          this.removeAttribute('options')
        }
        break

      case 'value':
        this.value = val
        break

      case 'readonly':
      case 'disabled':
        if (val === '') {
          this[name] = true
        }
        break
    }
  }

  unmount() {
    unbind(this.__INPUT__, 'keydown', this._handleKeydown)
    unbind(this.__INPUT__, 'click', this._activeFn)
    unbind(document, 'mousedown', this._inactiveFn)
    unbind(this.__OPTG__, 'click', this._handleSelect)
  }
}
</script>
