<template>
  <label>
    <wc-icon data-idx="0" is="star"></wc-icon>
    <wc-icon data-idx="1" is="star"></wc-icon>
    <wc-icon data-idx="2" is="star"></wc-icon>
    <wc-icon data-idx="3" is="star"></wc-icon>
    <wc-icon data-idx="4" is="star"></wc-icon>
    <span class="text">5分</span>
  </label>
</template>

<style lang="scss">
:host {
  display: flex;
  font-size: 18px;
  cursor: pointer;
  --size: 36px;
}

label {
  display: flex;
  align-items: center;
  line-height: 1;
  color: var(--color-grey-1);
  cursor: inherit;

  wc-icon {
    margin: 0 3px;
    transition: transform 0.15s linear, color 0.15s linear;

    &[is='star'] {
      color: var(--default-color, inherit);
    }

    &[is='star-full'],
    &[is='star-half'] {
      color: var(--color-teal-1);
    }

    &:hover {
      transform: scale(1.05);
    }
  }

  span {
    padding: 2px 8px 0;
    margin: 0 6px;
  }
}

:host([size='large']) {
  font-size: 26px;
  --size: 52px;
}
:host([size='medium']) {
  font-size: 22px;
  --size: 44px;
}
:host([size='small']) {
  font-size: 16px;
  --size: 32px;
}
:host([size='mini']) {
  font-size: 14px;
  --size: 26px;
}

:host([disabled]) {
  cursor: default;
  opacity: 0.6;

  label wc-icon:hover {
    transform: none;
  }
}
</style>

<script>
import $ from '../utils'

export default class Star {
  props = {
    value: 0,
    text: [],
    size: '',
    'default-color': null,
    colors: '',
    'allow-half': false,
    'show-value': false,
    starSize: 32, // 星星的宽度, 用于实现半星
    disabled: false
  }
  __init__() {
    /* render */

    this.__BOX__ = this.root.children[1]
    this.__STARS__ = Array.from(this.__BOX__.children)
    this.__TEXT__ = this.__STARS__.pop()
  }

  get value() {
    return this.props.value
  }

  set value(val) {
    var v = +val
    var tmp = val >> 0
    if (v === v && v > 0) {
      val = v
    } else {
      val = 0
    }

    if (val > 5) {
      val = 5
    }

    this.props.value = val
    this._updateDraw(-1)
  }

  /**
   * 更新图标渲染
   * i: int
   * f: float
   */
  _updateDraw(i, f = 0) {
    var _last = 'star-half'
    var { value, tmp = { i: 0, f: 0 } } = this.props

    if (i === -1) {
      i = Math.floor(value)
      f = +(value % 1).toFixed(1)
      if (i > 0 && i === value) {
        i--
        f = 1
      }
    }

    if (!this.props['allow-half']) {
      f = f > 0 ? 1 : 0
    }
    // 减少DOM操作
    if (i === tmp.i && f === tmp.f) {
      return
    }

    if (f > 0.5) {
      _last = 'star-full'
    }

    this.__STARS__.forEach((it, k) => {
      it.setAttribute('is', k < i ? 'star-full' : 'star')
      it.setAttribute('color', k < i ? this.props.color : 'grey')
    })

    if (f > 0) {
      this.__STARS__[i].setAttribute('is', _last)
      this.__STARS__[i].setAttribute('color', this.props.color)
    }

    // 缓存结果
    this.props.tmp = { i, f }

    if (i === 0 && f === 0) {
      this.__TEXT__.textContent = ''
    } else {
      if (this.props.text.length === 5) {
        this.__TEXT__.textContent = this.props.text[i]
      } else {
        if (this.props['show-value']) {
          this.__TEXT__.textContent = i + f
        }
      }
    }
  }

  mounted() {
    $.catch(this.__BOX__, 'mousemove', ev => {
      if (this.props.disabled) {
        return
      }
      if (ev.target.tagName === 'WC-ICON') {
        let idx = +ev.target.dataset.idx
        this._updateDraw(idx, +(ev.offsetX / this.props.starSize).toFixed(1))
      }
    })

    $.catch(this.__BOX__, 'click', ev => {
      var { tmp, disabled } = this.props
      if (disabled) {
        return
      }
      if (ev.target.tagName === 'WC-ICON') {
        this.props.value = tmp.i + tmp.f
        this.dispatchEvent(new CustomEvent('input'))
      }
    })

    $.catch(this.__BOX__, 'mouseleave', ev => {
      if (this.props.disabled) {
        return
      }
      this._updateDraw(-1)
    })
  }

  watch() {
    switch (name) {
      case 'size':
        this.props.starSize = this.__STARS__[0].clientWidth
        break

      case 'allow-half':
      case 'show-value':
      case 'disabled':
        this.props[name] = true
        break

      case 'default-color':
        if (val) {
          this.__BOX__.style.cssText += `--default-color:${val}`
        } else {
          this.__BOX__.style = ''
        }
        break
      case 'colors':
        if (val === null) {
          this.props.colors = ['#48c9b0']
        } else {
          this.props.colors = val.split(',').map(s => s.trim())
        }
        break

      case 'text':
        if (val) {
          val = val.split('|')
          if (val.length === 5) {
            this.props.text = val.map(it => it.trim())
          }
        }
        break

      case 'value':
        this.value = val
        break
    }
  }
}
</script>
