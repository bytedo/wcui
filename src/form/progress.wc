<template>
  <label>
    <svg>
      <circle cx="70" cy="70" r="70"></circle>
      <circle cx="70" cy="70" r="70"></circle>
    </svg>
    <svg width="140" height="30">
      <line x1="0" y1="0" x2="140" y2="0" stroke="black" />
    </svg>
  </label>
</template>

<style lang="scss">
:host {
  display: flex;
  align-items: center;

  label {
    // flex: 1;
    // height: var(--size, 10px);
    // border-radius: 9px;
    // background: var(--color-plain-2);

    // span {
    //   display: block;
    //   width: 0;
    //   height: 100%;
    //   border-radius: 9px;
    //   background: var(--color-teal-1);
    // }
  }
}
label {
  position: relative;
  width: 150px;
  height: 150px;
  // border-radius: 50%;
  // box-shadow: inset 0 0 50px #000;
  // background: #222;
  // z-index: 1000;
}
svg {
  position: relative;
  width: 150px;
  height: 150px;
  z-index: 1000;

  line {
    stroke: #efefef;
    stroke-width: 30;
    stroke-linecap: round;
  }
}

svg circle {
  width: 100%;
  height: 100%;
  fill: none;
  stroke: #efefef;
  stroke-width: 10;
  stroke-linecap: round;
  transform: translate(5px, 5px);

  &:last-child {
    stroke-dasharray: 440;
    stroke-dashoffset: calc(440 - (440 * 85) / 100);
    stroke: #00a1ff;
  }
}

:host([type='danger']) label span {
  background: var(--color-red-1);
}

:host([type='info']) label span {
  background: var(--color-blue-1);
}

:host([type='success']) label span {
  background: var(--color-green-1);
}

:host([type='warning']) label span {
  background: var(--color-orange-1);
}

:host([type='primary']) label span {
  background: var(--color-teal-1);
}
</style>

<script>
export default class Progress {
  props = {
    value: 0,
    max: 1
  }

  __init__() {
    /* render */
    this.__THUMB__ = this.root.children[1].lastElementChild
  }

  get value() {
    return this.props.value
  }

  set value(val) {
    this.props.value = +val
    this.calculate()
  }

  calculate() {
    var { max, value } = this.props
    // this.__THUMB__.style.width = `${(100 * value) / max}%`
  }

  mounted() {
    this.calculate()
  }

  watch() {
    switch (name) {
      case 'max':
        var max = +val
        if (max !== max || max < 1) {
          max = 1
        }
        this.props.max = max
        this.calculate()
        break

      case 'value':
        var v = +val
        if (v === v) {
          this.props.value = v
          this.calculate()
        }
        break
    }
  }
}
</script>
