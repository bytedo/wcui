<template>
  <label tabindex="0">
    <span class="dot"><wc-icon is="get"></wc-icon></span>
    <slot />
  </label>
</template>

<style lang="scss">
:host {
  display: inline-flex;
  line-height: 1;
  font-size: 14px;
  cursor: pointer;

  label {
    display: flex;
    justify-content: center;
    align-items: center;
    min-width: 32px;
    height: 32px;
    padding: 0 5px;
    line-height: 1;
    -moz-user-select: none;
    user-select: none;
    white-space: nowrap;
    cursor: inherit;
    outline: none;
    color: var(--color-dark-1);

    &.checked .dot {
      background: var(--color-dark-1);

      wc-icon {
        --size: 14px;
      }
    }
  }

  .dot {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 16px;
    height: 16px;
    margin-right: 4px;
    border: 1px solid var(--color-dark-1);
    border-radius: 4px;
    background: #fff;
    color: #fff;
    transition: box-shadow 0.15s linear, background 0.15s linear;

    wc-icon {
      --size: 0px;
      transition: width 0.15s linear;
    }
  }
}

:host(:focus-within) .dot {
  box-shadow: 0 0 0 2px var(--color-plain-a);
}

:host([type='danger']) label {
  color: var(--color-red-1);
  .dot {
    border-color: var(--color-red-1);
  }

  &.checked .dot {
    background: var(--color-red-1);
  }
}
:host([type='danger']:focus-within) .dot {
  box-shadow: 0 0 0 2px var(--color-red-a);
}

:host([type='info']) label {
  color: var(--color-blue-1);
  .dot {
    border-color: var(--color-blue-1);
  }

  &.checked .dot {
    background: var(--color-blue-1);
  }
}
:host([type='info']:focus-within) .dot {
  box-shadow: 0 0 0 2px var(--color-blue-a);
}

:host([type='success']) label {
  color: var(--color-green-1);
  .dot {
    border-color: var(--color-green-1);
  }

  &.checked .dot {
    background: var(--color-green-1);
  }
}
:host([type='success']:focus-within) .dot {
  box-shadow: 0 0 0 2px var(--color-green-a);
}

:host([type='primary']) label {
  color: var(--color-teal-1);

  .dot {
    border-color: var(--color-teal-1);
  }

  &.checked .dot {
    background: var(--color-teal-1);
  }
}
:host([type='primary']:focus-within) .dot {
  box-shadow: 0 0 0 2px var(--color-teal-a);
}

:host([type='warning']) label {
  color: var(--color-orange-1);
  .dot {
    border-color: var(--color-orange-1);
  }

  &.checked .dot {
    background: var(--color-orange-1);
  }
}
:host([type='warning']:focus-within) .dot {
  box-shadow: 0 0 0 2px var(--color-orange-a);
}

:host([readonly]) {
  cursor: default;
  opacity: 0.8;
}

:host([disabled]) {
  cursor: not-allowed;
  opacity: 0.6;

  label {
    color: var(--color-grey-2);
  }
}
</style>

<script>
import '../icon/index'
import $ from '../utils'

export default class Checkbox {
  props = {
    value: '',
    checked: false,
    readonly: false,
    disabled: false
  }
  __init__() {
    /* render */

    this.__SWITCH__ = this.root.lastElementChild
    this.__ICO__ = this.__SWITCH__.children[0]

    this._isInGroup = false
  }

  _checkGroup() {
    this._isInGroup = this.parentNode.tagName === 'WC-CHECKBOX-GROUP'
    if (this._isInGroup && this.parentNode.root) {
      if (this.parentNode.value.includes(this.value)) {
        this.checked = true
      }
    }
  }

  get value() {
    return this.props.value
  }

  set value(val) {
    this.props.value = val
  }

  get checked() {
    return this.props.checked
  }

  set checked(val) {
    this.props.checked = !!val
    this.__SWITCH__.classList.toggle('checked', this.props.checked)
  }

  get readOnly() {
    return this.props.readonly
  }

  set readOnly(val) {
    var type = typeof val

    if (val === this.props.readonly) {
      return
    }
    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.readonly = true
      this.setAttribute('readonly', '')
    } else {
      this.props.readonly = false
      this.removeAttribute('readonly')
    }
  }

  get disabled() {
    return this.props.disabled
  }

  set disabled(val) {
    var type = typeof val

    if (val === this.props.disabled) {
      return
    }
    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.disabled = true
      this.setAttribute('disabled', '')
      this.__SWITCH__.removeAttribute('tabindex')
    } else {
      this.props.disabled = false
      this.removeAttribute('disabled')
    }
  }

  _toggleCheck() {
    if (this.disabled || this.readOnly) {
      return
    }

    this.checked = !this.checked

    if (this._isInGroup) {
      this.parentNode.dispatchEvent(
        new CustomEvent('child-picked', {
          detail: { value: this.value, checked: this.checked }
        })
      )
    } else {
      this.dispatchEvent(new CustomEvent('input'))
    }
  }

  mounted() {
    this._checkGroup()

    this._handlClick = $.bind(this, 'click', ev => {
      ev.stopPropagation()
      this._toggleCheck()
    })

    this._handlKeydown = $.bind(this, 'keydown', ev => {
      // 空格交互
      if (ev.keyCode === 32) {
        this._toggleCheck()
      }
    })
  }

  unmount() {
    $.unbind(this, 'click', this._handlClick)
    $.unbind(this, 'keydown', this._handlKeydown)
  }

  watch() {
    switch (name) {
      case 'value':
        this.props[name] = val
        break

      case 'checked':
      case 'readonly':
      case 'disabled':
        var k = name
        if (k === 'readonly') {
          k = 'readOnly'
        }
        this[k] = val !== null
        break
    }
  }
}
</script>
