<template>
  <div class="label">
    <section class="preview">
      <input readonly />
      <wc-icon is="trigon-down"></wc-icon>
    </section>
    <div class="options-box"><slot /></div>
  </div>
</template>

<style lang="scss" scoped>
:host {
  display: inline-flex;
  min-width: 128px;
  height: 36px;
  border-radius: 3px;
  user-select: none;
  -moz-user-select: none;
  color: var(--color-dark-1);
  font-size: 14px;
  cursor: pointer;
  transition: box-shadow 0.15s linear;

  .label {
    position: relative;
    display: flex;
    width: 100%;
    height: 100%;
    line-height: 1;
    border: 1px solid var(--color-grey-2);
    border-radius: inherit;
    white-space: nowrap;
    background: #fff;
    cursor: inherit;
    transition: background 0.15s linear;
  }

  .preview {
    display: flex;
    align-items: center;
    width: 100%;
    height: 100%;
    padding: 0 8px;

    input {
      flex: 1;
      width: 0;
      border: 0;
      font: inherit;
      color: inherit;
      background: none;
      outline: none;
      cursor: inherit;

      &::placeholder {
        color: var(--color-grey-1);
      }
    }
    wc-icon {
      --size: 14px;
      color: var(--color-grey-2);
    }
  }

  .options-box {
    overflow: hidden;
    visibility: hidden;
    position: absolute;
    left: 0;
    top: 36px;
    z-index: 99;
    width: 100%;
    height: 0;
    border-radius: 3px;
    background: #fff;
    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.15);
    transition: height 0.15s linear;

    &.active {
      visibility: visible;
      height: auto;
      padding: 6px 0;
    }
  }
}

:host([size='large']) {
  min-width: 234px;
  height: 52px;
  font-size: 18px;

  .options-box {
    top: 52px;
  }
}
:host([size='medium']) {
  min-width: 160px;
  height: 44px;
  .options-box {
    top: 44px;
  }
}
:host([size='small']) {
  min-width: 96px;
  height: 32px;
  .options-box {
    top: 32px;
  }
}
:host([size='mini']) {
  min-width: 72px;
  height: 26px;
  font-size: 12px;

  .preview {
    wc-icon {
      --size: 10px;
    }
  }
  .options-box {
    top: 26px;
  }
}

:host(:focus-within) {
  box-shadow: 0 0 0 2px var(--color-plain-a);
}

/* --- */
:host([disabled]) {
  cursor: not-allowed;

  .label {
    border-color: var(--color-grey-1);
    background: var(--color-plain-1);
    opacity: 0.6;
  }
}
</style>

<script>
import '../icon/index'
import './option'
import $ from '../utils'

export default class Dropdown {
  props = {
    value: '',
    placeholder: '',
    size: '',
    disabled: false
  }

  state = {
    optionShow: false
  }

  __init__() {
    /* render */

    var outbox = this.root.children[1]
    this.__PREVIEW__ = outbox.children[0]
    this.__OPTIONS__ = outbox.children[1]
    this.__INPUT__ = this.__PREVIEW__.children[0]
    this.__ICO__ = this.__PREVIEW__.children[1]
  }

  _updateChildrenStat() {
    Array.from(this.children).forEach(it => {
      if (it.tagName === 'WC-OPTION' && it.root) {
        if (it.value === this.props.value) {
          it.setAttribute('active', '')
          this.__INPUT__.value = it.label || it.textContent
        } else {
          it.removeAttribute('active')
        }
      }
    })
  }

  get value() {
    return this.props.value
  }

  set value(val) {
    this.props.value = val
    this._updateChildrenStat()
  }

  get disabled() {
    return this.props.disabled
  }

  set disabled(val) {
    var type = typeof val

    if (val === this.props.disabled) {
      return
    }
    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.disabled = true
      this.setAttribute('disabled', '')
      this.__INPUT__.disabled = true
    } else {
      this.props.disabled = false
      this.removeAttribute('disabled')
      this.__INPUT__.disabled = false
    }
  }

  mounted() {
    this._activeFn = $.bind(this.__PREVIEW__, 'click', ev => {
      if (this.disabled) {
        return
      }
      this.state.optionShow = !this.state.optionShow
      this.__OPTIONS__.classList.toggle('active', this.state.optionShow)
    })

    this._pickedFn = $.bind(this.__OPTIONS__, 'click', ev => {
      let elem = ev.target

      if (elem === ev.currentTarget) {
        return
      }

      while (elem.tagName !== 'WC-OPTION') {
        elem = elem.parentNode
      }

      this.props.value = elem.value

      this._updateChildrenStat()
      this.dispatchEvent(new CustomEvent('input'))

      this.state.optionShow = false
      this.__OPTIONS__.classList.toggle('active', false)
    })

    this._inactiveFn = $.outside(this, ev => {
      this.state.optionShow = false
      this.__OPTIONS__.classList.toggle('active', false)
    })
  }

  unmount() {
    this.state.options = []
    $.unbind(this.__PREVIEW__, 'click', this._activeFn)
    $.unbind(this.__OPTIONS__, 'click', this._pickedFn)
    $.clearOutside(this._inactiveFn)
  }

  watch() {
    switch (name) {
      case 'value':
        if (val !== null) {
          this.value = val
        }
        break

      case 'placeholder':
        this.__INPUT__.placeholder = val || ''
        break

      case 'size':
        if (val) {
          Array.from(this.children).forEach(it => {
            it.setAttribute('size', val)
          })
        }
        break

      case 'disabled':
        this.disabled = val !== null
        break
    }
  }
}
</script>
