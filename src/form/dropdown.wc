<template>
  <div class="label">
    <section class="preview">
      <input readonly />
      <wc-icon is="trigon-down"></wc-icon>
    </section>
    <ul class="options-box"></ul>
    <slot name="option"></slot>
  </div>
</template>

<style lang="scss" scoped>
ul,
li {
  list-style: none;
}
slot {
  display: none;
}
:host {
  display: inline-flex;
  min-width: 72px;
  width: 128px;
  height: 36px;
  border-radius: 3px;
  user-select: none;
  -moz-user-select: none;
  color: var(--color-dark-1);
  font-size: 14px;
  cursor: pointer;
  transition: box-shadow 0.15s linear;

  .label {
    position: relative;
    display: flex;
    width: 100%;
    height: 100%;
    line-height: 1;
    border: 1px solid var(--color-grey-2);
    border-radius: inherit;
    white-space: nowrap;
    background: #fff;
    cursor: inherit;
    transition: background 0.15s linear;
  }

  .preview {
    display: flex;
    align-items: center;
    width: 100%;
    height: 100%;
    padding: 0 8px;

    input {
      flex: 1;
      width: 0;
      border: 0;
      font: inherit;
      color: inherit;
      background: none;
      outline: none;
      cursor: inherit;

      &::placeholder {
        color: var(--color-grey-1);
      }
    }
    wc-icon {
      --size: 14px;
      color: var(--color-grey-2);
    }
  }

  .options-box {
    overflow: hidden;
    visibility: hidden;
    display: flex;
    flex-direction: column;
    position: absolute;
    left: 0;
    top: 36px;
    z-index: 99;
    width: 100%;
    height: 0;
    border-radius: 3px;
    background: #fff;
    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.15);
    transition: height 0.15s linear;

    li {
      display: flex;
      align-items: center;
      height: 32px;
      padding: 0 8px;
      transition: background 0.15s linear;

      &:hover,
      &.active {
        background: var(--color-plain-1);
      }
    }

    &.active {
      visibility: visible;
      height: auto;
      padding: 6px 0;
    }
  }
}

:host(:focus-within) {
  box-shadow: 0 0 0 2px var(--color-plain-a);
}
</style>

<script>
import '../icon/index'
import $ from '../utils'

export default class Dropdown {
  props = {
    value: '',
    placeholder: ''
  }

  state = {
    optionShow: false,
    options: []
  }

  __init__() {
    /* render */

    var outbox = this.root.children[1]
    this.__PREVIEW__ = outbox.children[0]
    this.__OPTIONS__ = outbox.children[1]
    this.__SLOT__ = outbox.children[2]
    this.__INPUT__ = this.__PREVIEW__.children[0]
    this.__ICO__ = this.__PREVIEW__.children[1]
  }

  get value() {
    return this.props.value
  }

  set value(val) {
    this.props.value = val
    for (let it of this.state.options) {
      if (it.opt.value === val) {
        this.__INPUT__.value = it.label
        break
      }
    }
  }

  mounted() {
    let opts = this.__SLOT__.assignedNodes()
    this.state.options = []

    this.__OPTIONS__.innerHTML = opts
      .map(it => {
        let attr = ''
        let tmp = { label: it.textContent, opt: { ...it.dataset } }
        for (let k in tmp.opt) {
          attr += `data-${k}="${tmp.opt[k]}" `
        }
        tmp.label = tmp.label || tmp.opt.value
        tmp.opt.value = tmp.opt.value || tmp.label

        this.state.options.push(tmp)
        return `<li ${attr}>${tmp.label}</li>`
      })
      .join('')

    this._activeFn = $.bind(this.__PREVIEW__, 'click', ev => {
      this.state.optionShow = !this.state.optionShow
      this.__OPTIONS__.classList.toggle('active', this.state.optionShow)
    })

    this._pickedFn = $.bind(this.__OPTIONS__, 'click', ev => {
      if (ev.target === ev.currentTarget) {
        return
      }

      let detail = { ...ev.target.dataset }
      this.__INPUT__.value = ev.target.textContent
      this.props.value = detail.value || ev.target.textContent

      this.dispatchEvent(new CustomEvent('input'))
      this.dispatchEvent(new CustomEvent('select', { detail }))

      this.state.optionShow = false
      this.__OPTIONS__.classList.toggle('active', false)
    })

    this._inactiveFn = $.outside(this, ev => {
      this.state.optionShow = false
      this.__OPTIONS__.classList.toggle('active', false)
    })
  }

  unmount() {
    this.state.options = []
    $.unbind(this.__PREVIEW__, 'click', this._activeFn)
    $.unbind(this.__OPTIONS__, 'click', this._pickedFn)
    $.clearOutside(this._inactiveFn)
  }

  watch() {
    switch (name) {
      case 'placeholder':
        this.__INPUT__.placeholder = val || ''
        break

      default:
        break
    }
  }
}
</script>
