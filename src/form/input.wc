<template>
  <div class="label">
    <slot class="prepend" name="prepend"></slot>
    <input spellcheck="false" />
    <wc-icon class="icon"></wc-icon>
    <slot class="append" name="append"></slot>

    <div class="suggestion">
      <wc-scroll>
        <ul class="list"></ul>
      </wc-scroll>
    </div>
  </div>
</template>

<style lang="scss">
ul,
li {
  list-style: none;
}
:host {
  overflow: hidden;
  display: inline-flex;
  min-width: 128px;
  user-select: none;
  -moz-user-select: none;
  color: var(--color-dark-1);
  border-radius: 6px;
  cursor: text;
  transition: box-shadow 0.15s linear;
}

.label {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 36px;
  font-size: 14px;
  border: 2px solid var(--color-grey-2);
  border-radius: inherit;
  background: var(--bg-color, #fff);
  color: inherit;
  cursor: inherit;

  input {
    flex: 1;
    min-width: 36px;
    width: 0;
    height: 100%;
    padding: 0 8px;
    border: 0;
    border-radius: inherit;
    color: inherit;
    font: inherit;
    background: none;
    outline: none;
    box-shadow: none;
    cursor: inherit;

    &::placeholder {
      color: var(--color-grey-1);
    }
  }

  .prepend,
  .append {
    display: none;
    justify-content: center;
    align-items: center;
    width: auto;
    height: 32px;
    padding: 0 10px;
    line-height: 1;
    white-space: nowrap;
  }
  .prepend {
    border-right: 2px solid var(--color-grey-a);
    border-radius: 6px 0 0 6px;
  }
  .append {
    border-left: 2px solid var(--color-grey-a);
    border-radius: 0 6px 6px 0;
  }
  &[prepend] .prepend,
  &[append] .append {
    display: flex;
  }
  &[prepend] input,
  &[append] input {
    min-width: 64px;
  }
  /* ----- */
  .icon {
    --size: 18px;
    margin: 0 8px 0 4px;
    color: var(--color-grey-2);
  }
}

.suggestion {
  display: none;
  overflow: hidden;
  position: fixed;
  z-index: 10240;
  left: 0;
  top: 0;
  width: 200px;
  height: auto;
  max-height: 200px;
  min-height: 46px;
  padding: 4px 0;
  border-radius: 4px;
  background: var(--color-plain-1);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);

  .list {
    width: 100%;
  }
  &.show {
    display: flex;
  }

  li {
    overflow: hidden;
    width: 100%;
    height: 30px;
    line-height: 30px;
    padding: 0 8px;
    text-overflow: ellipsis;
    white-space: nowrap;
    cursor: pointer;

    &:hover,
    &[focus] {
      background: var(--color-plain-2);
    }
  }
}

/* 额外样式 */
:host([round]) {
  border-radius: 26px;

  .label input {
    padding: 0 10px;
    margin: 0 18px;
  }

  .label[prepend] input,
  .label[append] input {
    padding: 0 5px;
  }
  .label[prepend] input {
    margin-left: 0;
  }
  .label[append] input {
    margin-right: 0;
  }

  .prepend {
    border-radius: 26px 0 0 26px;
  }
  .append {
    border-radius: 0 26px 26px 0;
  }
}

:host([size='large']) {
  min-width: 234px;
  .label {
    height: 52px;
    font-size: 18px;

    input {
      padding: 0 16px;
    }
  }
  .prepend,
  .append {
    height: 48px;
    padding: 0 16px;
  }

  .icon {
    --size: 24px;
    margin: 0 20px 0 4px;
  }
}
:host([size='medium']) {
  min-width: 160px;
  .label {
    height: 44px;

    input {
      padding: 0 10px;
    }
  }
  .prepend,
  .append {
    height: 40px;
  }
}
:host([size='small']) {
  min-width: 96px;
  .label {
    height: 32px;

    input {
      padding: 0 6px;
    }
  }
  .prepend,
  .append {
    height: 28px;
  }
}
:host([size='mini']) {
  min-width: 72px;
  .label {
    height: 26px;
    font-size: 12px;
  }
  .icon {
    --size: 14px;
  }
  .prepend,
  .append {
    height: 22px;
  }
}

/* ----- 类型(颜色) ----- */
:host(:focus-within) {
  box-shadow: 0 0 0 2px var(--color-grey-a);
}
:host([type='primary']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-teal-a);
}
:host([type='info']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-blue-a);
}
:host([type='success']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-green-a);
}
:host([type='danger']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-red-a);
}
:host([type='warning']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-orange-a);
}

:host([type='primary']) .label {
  border-color: var(--color-teal-2);
  .prepend,
  .append {
    border-color: var(--color-teal-a);
  }
}
:host([type='info']) .label {
  border-color: var(--color-blue-2);
  .prepend,
  .append {
    border-color: var(--color-blue-a);
  }
}
:host([type='success']) .label {
  border-color: var(--color-green-2);
  .prepend,
  .append {
    border-color: var(--color-green-a);
  }
}
:host([type='danger']) .label {
  border-color: var(--color-red-2);
  .prepend,
  .append {
    border-color: var(--color-red-a);
  }
}
:host([type='warning']) .label {
  border-color: var(--color-orange-2);
  .prepend,
  .append {
    border-color: var(--color-orange-a);
  }
}

/* --- */
:host([disabled]) {
  cursor: not-allowed;

  .label {
    border-color: var(--color-grey-1);
    background: var(--color-plain-1);
    opacity: 0.6;
  }
}
:host([readonly]) {
  cursor: default;
}

:host([no-border]),
:host(:focus-within[no-border]) {
  .label {
    border: 0;

    &[prepend] input {
      padding-left: 2px;
    }
    &[append] input {
      padding-right: 2px;
    }
  }
  .prepend,
  .append {
    border: 0;
  }
}
</style>

<script>
import '../scroll/index'
import '../icon/index'
import $ from '../utils'

export default class Input {
  props = {
    value: '',
    icon: '',
    placeholder: '',
    maxlength: null,
    minlength: null,
    autofocus: false,
    readonly: false,
    disabled: false,
    passwd: false,
    lazy: 0 // 输入建议并发拦截时间, 单位毫秒
  }

  state = {
    list: [], // 补全列表
    mvidx: null //下拉列表光标的索引ID
  }

  __init__() {
    /* render */

    this.__OUTER__ = this.root.children[1]
    this.__PREPEND__ = this.__OUTER__.children[0]
    this.__INPUT__ = this.__OUTER__.children[1]
    this.__ICO__ = this.__OUTER__.children[2]
    this.__APPEND__ = this.__OUTER__.children[3]
    this.__LIST__ = this.__OUTER__.children[4]
  }

  get readOnly() {
    return this.props.readonly
  }

  set readOnly(val) {
    var type = typeof val

    if (val === this.props.readonly) {
      return
    }

    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.readonly = true
      this.setAttribute('readonly', '')
      this.__INPUT__.setAttribute('readonly', '')
    } else {
      this.props.readonly = false
      this.removeAttribute('readonly')
      this.__INPUT__.removeAttribute('readonly')
    }
  }

  get disabled() {
    return this.props.disabled
  }

  set disabled(val) {
    var type = typeof val

    if (val === this.props.disabled) {
      return
    }
    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.disabled = true
      this.setAttribute('disabled', '')
      this.__INPUT__.setAttribute('disabled', '')
    } else {
      this.props.disabled = false
      this.removeAttribute('disabled')
      this.__INPUT__.removeAttribute('disabled')
    }
  }

  get value() {
    return this.__INPUT__.value
  }

  set value(val) {
    this.__INPUT__.value = val
  }

  // 移动光标选择下拉选项
  _moveSelect(ev) {
    var { list } = this.state
    if (list && list.length) {
      ev.preventDefault()
      var step = ev.keyCode === 38 ? -1 : 1
      var items = Array.from(
        this.__LIST__.firstElementChild.firstElementChild.children
      )
      if (this.state.mvidx === null) {
        this.state.mvidx = 0
      } else {
        this.state.mvidx += step
      }
      if (this.state.mvidx < 0) {
        this.state.mvidx = 0
      } else if (this.state.mvidx > items.length - 1) {
        this.state.mvidx = items.length - 1
      }
      items.forEach((it, i) => {
        if (i === this.state.mvidx) {
          this.__LIST__.firstElementChild.scrollTop = it.offsetTop - 150
          it.setAttribute('focus', '')
        } else {
          it.removeAttribute('focus')
        }
      })
    }
  }

  // 触发列表选择
  _fetchSelect(idx, ev) {
    var item = this.state.list[idx]
    this.value = item.value
    this.dispatchEvent(
      new CustomEvent('select', {
        detail: item
      })
    )
    this._handleChange(ev)
    this.__LIST__.classList.remove('show')
    this.state.mvidx = null
  }

  mounted() {
    var prepend = this.__PREPEND__.assignedNodes()
    var append = this.__APPEND__.assignedNodes()

    this.stamp = 0

    // 相同插槽, 只允许1个
    while (prepend.length > 1) {
      this.removeChild(prepend.pop())
    }
    while (append.length > 1) {
      this.removeChild(append.pop())
    }

    if (prepend.length) {
      this.__OUTER__.setAttribute('prepend', '')
    }
    if (append.length) {
      this.__OUTER__.setAttribute('append', '')
    }

    // 键盘事件
    this._handleSubmit = $.catch(this.__INPUT__, 'keydown', ev => {
      let { passwd, minlength } = this.props
      let val = this.value
      let now = Date.now()

      if (this.disabled || this.readOnly) {
        return
      }
      // up: 38, down: 40
      if (ev.keyCode === 38 || ev.keyCode === 40) {
        // 仅普通文本表单, 密码和多行文本框不做响应
        if (!passwd) {
          return this._moveSelect(ev)
        }
      }
      // 回车触发submit事件
      // textarea 要按Ctrl Or Cmd键, 才会触发
      if (ev.keyCode === 13) {
        // 如果是输入建议存在,则第1次回车的时候, 不触发提交
        if (this.state.mvidx !== null) {
          return this._fetchSelect(this.state.mvidx, ev)
        }

        // 并发拦截
        if (lazy && now - this.stamp < lazy) {
          return
        }

        // 长度不够,拦截submit
        if (minlength && minlength > 0) {
          if (val.length < minlength) {
            return
          }
        }

        this.stamp = now
        this.dispatchEvent(new CustomEvent('submit', { detail: this.value }))
      }
    })

    // 输入状态事件
    this._handleChange = $.bind(this.__INPUT__, 'input', ev => {
      let now = Date.now()
      let { lazy, passwd } = this.props

      // 密码类型不触发输入建议
      if (passwd) {
        return
      }

      // 并发拦截
      if (lazy && now - this.stamp < lazy) {
        return
      }

      this.stamp = now

      this.dispatchEvent(
        new CustomEvent('fetch-suggest', {
          detail: {
            value: this.value,
            send: list => {
              this.state.list = list
              this._parseSuggestion()
            }
          }
        })
      )
    })

    // 渲染建议列表
    this._parseSuggestion = $.bind(this.__INPUT__, 'click', ev => {
      var { list } = this.state
      let { x, y, width, height } = this.getBoundingClientRect()
      if (list && list.length) {
        var html = list
          .map((it, i) => `<li data-idx="${i}">${it.value}</li>`)
          .join('')
        this.__LIST__.firstElementChild.firstElementChild.innerHTML = html
        this.__LIST__.classList.toggle('show', true)
        this.__LIST__.style.cssText = `left:${x}px;top:${y +
          height +
          5}px;width:${width}px;`
      } else {
        this.__LIST__.classList.toggle('show', false)
      }
    })

    this._inactiveFn = $.outside(this, ev => {
      this.__LIST__.classList.remove('show')
    })

    // 选择建议
    this._handleSelect = $.bind(this.__LIST__, 'click', ev => {
      if (ev.target.tagName === 'LI') {
        this._fetchSelect(ev.target.dataset.idx, ev)
        this.dispatchEvent(new CustomEvent('input'))
      }
    })
  }

  unmount() {
    $.unbind(this.__INPUT__, 'keydown', this._handleSubmit)
    $.unbind(this.__INPUT__, 'input', this._handleChange)
    $.unbind(this.__INPUT__, 'click', this._parseSuggestion)
    $.unbind(this.__LIST__, 'click', this._handleSelect)
    $.clearOutside(this._inactiveFn)
  }

  watch() {
    switch (name) {
      case 'icon':
        this.props.icon = val
        if (val) {
          this.__ICO__.setAttribute('is', val)
        } else {
          this.removeAttribute('icon')
          this.__ICO__.removeAttribute('is')
        }
        break

      case 'autofocus':
        this.__INPUT__.setAttribute('autofocus', '')
        // 辣鸡火狐, 要触发一下focus, 才能聚焦
        setTimeout(_ => {
          this.__INPUT__.focus()
        }, 10)

        break

      case 'placeholder':
        this.__INPUT__.setAttribute('placeholder', val)
        break

      case 'value':
        this.value = val
        break

      case 'maxlength':
      case 'minlength':
        if (val === null) {
          this.__INPUT__.removeAttribute(name)
        } else {
          let n = +val
          if (n > 0) {
            this.__INPUT__.setAttribute(name, +val)
          }
        }
        break

      case 'lazy':
        this.props.lazy = val >> 0
        break

      case 'readonly':
      case 'disabled':
        var k = name
        if (k === 'readonly') {
          k = 'readOnly'
        }
        this[k] = val !== null
        break

      case 'passwd':
        if (val === null) {
          this.props.passwd = false
          this.__INPUT__.type = 'text'
        } else {
          this.props.passwd = true
          this.__INPUT__.type = 'password'
        }
        break
    }
  }
}
</script>
