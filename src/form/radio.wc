<template>
  <slot />
</template>

<style lang="scss">
:host {
  display: inline-flex;
}
</style>

<script>
import $ from '../utils'
import './radio-item'

export default class RadioGroup {
  props = {
    value: null,
    disabled: false,
    readonly: false
  }

  __init__() {
    /* render */
  }

  _updateChildrenStat(checkAll) {
    Array.from(this.children).forEach(it => {
      if (it.tagName === 'WC-RADIO' && it.root) {
        if (checkAll) {
          it.disabled = this.disabled
          it.readOnly = this.readOnly
        }

        if (it.value === this.props.value) {
          it.checked = true
        } else {
          it.checked = false
        }
      }
    })
  }

  get value() {
    return this.props.value
  }

  set value(val) {
    if (val === this.props.value) {
      return
    }
    this.props.value = val
    this._updateChildrenStat()
  }

  get readOnly() {
    return this.props.readonly
  }

  set readOnly(val) {
    var type = typeof val

    if (val === this.props.readonly) {
      return
    }
    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.readonly = true
      this.setAttribute('readonly', '')
    } else {
      this.props.readonly = false
      this.removeAttribute('readonly')
    }
    this._updateChildrenStat(true)
  }

  get disabled() {
    return this.props.disabled
  }

  set disabled(val) {
    var type = typeof val

    if (val === this.props.disabled) {
      return
    }
    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.disabled = true
      this.setAttribute('disabled', '')
    } else {
      this.props.disabled = false
      this.removeAttribute('disabled')
    }
    this._updateChildrenStat(true)
  }

  mounted() {
    this._pickedFn = $.bind(this, 'child-picked', ev => {
      this.value = ev.detail
      this.dispatchEvent(new CustomEvent('input'))
    })

    this.__observer = new MutationObserver(_ => {
      console.log('-00000')
      this._updateChildrenStat(true)
    })

    this.__observer.observe(this, {
      childList: true,
      subtree: true
    })
  }

  unmount() {
    $.unbind(this, 'child-picked', this._pickedFn)
    this.__observer.disconnect()
  }

  watch() {
    switch (name) {
      case 'value':
        this.value = val
        break

      case 'readonly':
      case 'disabled':
        var k = name
        if (k === 'readonly') {
          k = 'readOnly'
        }
        console.log('---', k, val, Array.from(this.children))
        this[k] = val !== null
        break
    }
  }
}
</script>
