<template>
  <section>
    <label>
      <span class="dot"></span>
    </label>
    <slot></slot>
  </section>
</template>

<style lang="scss">
:host {
  display: inline-block;

  section {
    display: flex;
    justify-content: center;
    align-items: center;
    // vertical-align: middle;
    line-height: 0;
    white-space: nowrap;
  }
  label {
    display: flex;
    align-items: center;
    width: 32px;
    height: 18px;
    padding: 3px;
    margin: 5px;
    border-radius: 21px;
    background: nth($cp, 3);
    cursor: inherit;

    &.checked {
      flex-direction: row-reverse;
      background: nth($cgr, 3);
    }
  }
  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #fff;
  }
}

:host([disabled]) {
  cursor: not-allowed;
  opacity: 0.6;
}

:host([size='large']) {
  label {
    width: 46px;
    height: 26px;
    padding: 3px 5px;
  }
  .dot {
    width: 18px;
    height: 18px;
  }
}
:host([size='medium']) {
  label {
    width: 38px;
    height: 22px;
    padding: 3px 4px;
  }
  .dot {
    width: 16px;
    height: 16px;
  }
}
:host([size='mini']) {
  label {
    width: 22px;
    height: 14px;
    padding: 2px;
  }
  .dot {
    width: 10px;
    height: 10px;
  }
}

:host([color='red']) label.checked {
  background: nth($cr, 1);
}

:host([color='blue']) label.checked {
  background: nth($cb, 1);
}

:host([color='green']) label.checked {
  background: nth($cg, 1);
}

:host([color='teal']) label.checked {
  background: nth($ct, 1);
}

:host([color='orange']) label.checked {
  background: nth($co, 1);
}

:host([color='dark']) label.checked {
  background: nth($cd, 1);
}

:host([color='purple']) label.checked {
  background: nth($cpp, 1);
}
</style>

<script>
import $ from '../utils'
export default class Switch {
  props = {
    'active-text': null,
    'inactive-text': null,
    checked: false,
    disabled: false
  }
  __init__() {
    /* render */

    this.__SWITCH__ = this.root.lastElementChild.firstElementChild
  }

  get value() {
    return this.props.checked
  }

  set value(val) {
    this.checked = val
  }

  get checked() {
    return this.props.checked
  }

  set checked(val) {
    this.props.checked = !!val
    this.__SWITCH__.classList.toggle('checked', this.props.checked)
  }

  get disabled() {
    return this.props.disabled
  }

  set disabled(val) {
    var type = typeof val

    if (val === this.props.disabled) {
      return
    }
    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.disabled = true
      this.setAttribute('disabled', '')
    } else {
      this.props.disabled = false
      this.removeAttribute('disabled')
    }
  }

  mounted() {
    this._handleClick = $.bind(this, 'click', ev => {
      if (this.disabled) {
        return
      }
      this.checked = !this.checked
      if (this.checked) {
        if (this.props['active-text'] !== null) {
          this.textContent = this.props['active-text']
        }
      } else {
        if (this.props['inactive-text'] !== null) {
          this.textContent = this.props['inactive-text']
        }
      }
      this.dispatchEvent(new CustomEvent('input'))
    })
  }

  unmount() {
    $.unbind(this, 'click', this._handleClick)
  }

  watch() {
    switch (name) {
      case 'checked':
      case 'disabled':
        this[name] = true
        break
      case 'active-text':
      case 'inactive-text':
        this.props[name] = val + ''
        break
    }
  }
}
</script>
