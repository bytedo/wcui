<template>
  <div class="label">
    <span data-act="-">-</span>
    <input value="0" maxlength="9" />
    <span data-act="+">+</span>
  </div>
</template>

<style lang="scss">
:host {
  overflow: hidden;
  display: inline-flex;
  min-width: 128px;
  height: 36px;
  user-select: none;
  -moz-user-select: none;
  color: var(--color-dark-1);
  border-radius: 3px;
  cursor: text;
  transition: box-shadow 0.15s linear;
}

.label {
  display: flex;
  width: 100%;
  height: 100%;
  margin: 0 auto;
  line-height: 1;
  font-size: 14px;
  border: 1px solid var(--color-grey-2);
  border-radius: inherit;
  background: var(--bg-color, #fff);
  color: inherit;
  cursor: text;

  span {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 34px;
    height: 100%;
    font-size: 18px;
    cursor: pointer;

    &:first-child {
      border-radius: 3px 0 0 3px;
      border-right: 1px solid var(--color-grey-a);
    }
    &:last-child {
      border-radius: 0 3px 3px 0;
      border-left: 1px solid var(--color-grey-a);
    }

    &.disabled {
      cursor: not-allowed;
      opacity: 0.6;
    }
  }

  input {
    flex: 1;
    min-width: 32px;
    width: 0;
    height: 100%;
    padding: 0 6px;
    border: 0;
    border-radius: inherit;
    color: inherit;
    font: inherit;
    text-align: center;
    background: none;
    outline: none;
    box-shadow: none;
    cursor: inherit;

    &::placeholder {
      color: var(--color-grey-1);
    }
  }
  /* ----- */
  .icon {
    padding: 0 5px;
    --size: 20px;
  }
}

/* --- */
:host([readonly]) .label {
  cursor: default;
  opacity: 0.8;

  span {
    cursor: inherit;
  }
}
:host([disabled]) .label {
  background: var(--color-plain-1);
  cursor: not-allowed;
  opacity: 0.6;

  span {
    cursor: inherit;
  }
}

/* 额外样式 */
:host([round]) {
  border-radius: 21px;

  .label span:first-child {
    border-radius: 21px 0 0 21px;
  }
  .label span:last-child {
    border-radius: 0 21px 21px 0;
  }
}

:host([size='large']) {
  min-width: 234px;
  height: 52px;
  .label {
    font-size: 18px;
    span {
      width: 52px;
      font-size: 24px;
    }
  }
}

:host([size='medium']) {
  min-width: 160px;
  height: 44px;
  .label {
    span {
      width: 44px;
      font-size: 22px;
    }
  }
}
:host([size='small']) {
  min-width: 96px;
  height: 32px;
  .label {
    span {
      width: 32px;
    }
  }
}
:host([size='mini']) {
  min-width: 72px;
  height: 26px;
  .label {
    font-size: 12px;
    span {
      width: 26px;
    }
  }
}
//
:host(:focus-within) {
  box-shadow: 0 0 0 2px var(--color-plain-a);
}
:host([type='primary']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-teal-a);
}
:host([type='info']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-blue-a);
}
:host([type='success']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-green-a);
}
:host([type='danger']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-red-a);
}
:host([type='warning']:focus-within) {
  box-shadow: 0 0 0 2px var(--color-orange-a);
}
:host([type='primary']) .label {
  border-color: var(--color-teal-2);
  span {
    border-color: var(--color-teal-a);
  }
}
:host([type='info']) .label {
  border-color: var(--color-blue-2);
  span {
    border-color: var(--color-blue-a);
  }
}
:host([type='success']) .label {
  border-color: var(--color-green-2);
  span {
    border-color: var(--color-green-a);
  }
}
:host([type='danger']) .label {
  border-color: var(--color-red-2);
  span {
    border-color: var(--color-red-a);
  }
}
:host([type='warning']) .label {
  border-color: var(--color-orange-2);
  span {
    border-color: var(--color-orange-a);
  }
}
</style>

<script>
import $ from '../utils'

export default class Number {
  props = {
    value: 0,
    max: null,
    min: null,
    step: 1,
    autofocus: false,
    readonly: false,
    disabled: false,
    lazy: 0
  }

  __init__() {
    /* render */

    this.__OUTER__ = this.root.children[1]
    this.__INPUT__ = this.__OUTER__.children[1]
  }

  get readOnly() {
    return this.props.readonly
  }

  set readOnly(val) {
    var type = typeof val

    if (val === this.props.readonly) {
      return
    }
    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.readonly = true
      this.setAttribute('readonly', '')
      this.__INPUT__.setAttribute('readonly', '')
    } else {
      this.props.readonly = false
      this.removeAttribute('readonly')
      this.__INPUT__.removeAttribute('readonly')
    }
  }

  get disabled() {
    return this.props.disabled
  }

  set disabled(val) {
    var type = typeof val

    if (val === this.props.disabled) {
      return
    }
    if ((type === 'boolean' && val) || type !== 'boolean') {
      this.props.disabled = true
      this.setAttribute('disabled', '')
      this.__INPUT__.setAttribute('disabled', '')
    } else {
      this.props.disabled = false
      this.removeAttribute('disabled')
      this.__INPUT__.removeAttribute('disabled')
    }
  }

  get value() {
    return this.props.value
  }

  set value(val) {
    var n = +val
    if (n === n) {
      val = n
    } else {
      val = 0
    }
    this.props.value = val
    this.__INPUT__.value = val

    this._checkActionEnable()
    this.dispatchEvent(new CustomEvent('input'))
  }

  _checkActionEnable() {
    var { max, min, value } = this.props
    var n = value

    if (min !== null) {
      if (min > n) {
        n = min
      }
      this.__OUTER__.children[0].classList.toggle('disabled', value <= min)
    }
    if (max !== null) {
      if (max < n) {
        n = max
      }
      this.__OUTER__.children[2].classList.toggle('disabled', value >= max)
    }
    if (n !== value) {
      this.props.value = n
      this.__INPUT__.value = n
    }
  }

  _updateValue(act) {
    var { max, min, value, step } = this.props
    if (act === '+') {
      if (max !== null && max < value + step) {
        return
      }
      value += step
    } else {
      if (min !== null && min > value - step) {
        return
      }
      value -= step
    }
    this.props.value = +value.toFixed(2)
    this.__INPUT__.value = this.props.value
    this._checkActionEnable()
    this.dispatchEvent(new CustomEvent('input'))
  }

  mounted() {
    this.stamp = 0

    // 键盘事件
    this._handleSubmit = $.catch(this.__INPUT__, 'keydown', ev => {
      let now = Date.now()
      let { lazy } = this.props

      if (this.disabled || this.readOnly) {
        return
      }

      // up: 38, down: 40
      if (ev.keyCode === 38 || ev.keyCode === 40) {
        ev.preventDefault()
        return this._updateValue(ev.keyCode === 38 ? '+' : '-')
      }
      // 回车触发submit事件
      if (ev.keyCode === 13) {
        ev.preventDefault()

        // 并发拦截
        if (lazy && now - this.stamp < lazy) {
          return
        }

        this.stamp = now

        this.dispatchEvent(
          new CustomEvent('submit', {
            detail: this.value
          })
        )
      }
    })

    this._handleChange = $.bind(this.__INPUT__, 'change', ev => {
      if (isFinite(this.__INPUT__.value)) {
        this.value = this.__INPUT__.value
      } else {
        this.value = 0
      }
    })

    this._handleAction = $.bind(this.__OUTER__, 'click', ev => {
      if (this.disabled || this.readOnly) {
        return
      }

      if (ev.target.tagName === 'SPAN') {
        this._updateValue(ev.target.dataset.act)
      }
    })
  }

  unmount() {
    $.unbind(this.__INPUT__, 'keydown', this._handleSubmit)
    $.unbind(this.__OUTER__, 'click', this._handleAction)
  }

  watch() {
    switch (name) {
      case 'autofocus':
        this.__INPUT__.setAttribute('autofocus', '')
        // 辣鸡火狐, 要触发一下focus, 才能聚焦
        setTimeout(_ => {
          this.__INPUT__.focus()
        }, 10)
        break

      case 'value':
        this.value = val >> 0
        break

      case 'step':
      case 'max':
      case 'min':
        var n = +val
        if (n === n) {
          this.props[name] = n
        }
        this._checkActionEnable()
        break

      case 'lazy':
        this.props.lazy = val >> 0
        break

      case 'readonly':
      case 'disabled':
        var k = name
        if (k === 'readonly') {
          k = 'readOnly'
        }
        this[k] = val !== null
        break
    }
  }
}
</script>
