<template>
  <canvas />
</template>

<style lang="scss">
:host {
  display: flex;
  width: 100%;
  height: 10px;

  canvas {
    display: block;
  }
}

:host([type='circle']),
:host([type='dashboard']) {
  display: inline-flex;
  width: 160px;
  height: 160px;
}
</style>

<script>
function getColor(opt) {
  var { colors, value } = opt
  var idx = 0
  if (colors.length > 1) {
    idx = Math.floor(value / (100 / colors.length))
    if (idx === colors.length) {
      idx--
    }
  }
  return colors[idx]
}

function drawLine(el, size, opt) {
  var ctx = el.getContext('2d')
  var { width, height } = size
  var {
    value,
    'show-text': showText,
    'default-color': bg,
    'line-size': line,
    'font-size': font
  } = opt
  var color = getColor(opt)
  var half

  //
  line = line || 10
  font = font || 10
  half = line / 2

  el.width = width
  el.height = height

  ctx.clearRect(0, 0, width, height)

  ctx.strokeStyle = bg
  ctx.lineWidth = line
  ctx.lineCap = 'round'

  ctx.beginPath()
  ctx.moveTo(half, half)
  ctx.lineTo(width - half, half)
  ctx.stroke()
  ctx.closePath()

  if (value > 0) {
    ctx.strokeStyle = color
    ctx.beginPath()
    ctx.moveTo(half, half)
    ctx.lineTo(((width - half) * value) / 100, half)
    ctx.stroke()
    ctx.closePath()

    if (showText) {
      ctx.fillStyle = '#fff'
      ctx.font = `bold ${font}px Arial`
      ctx.textBaseline = 'middle'
      ctx.textAlign = 'right'
      ctx.fillText(
        (value < 100 ? value.toFixed(1) : 100) + '%',
        ((width - half) * value) / 100,
        half
      )
    }
  }
}

function drawCircle(el, size, opt, start = -90, end = 270) {
  var ctx = el.getContext('2d')
  var { width } = size
  var {
    value,
    'show-text': showText,
    'default-color': bg,
    'line-size': line,
    'font-size': font
  } = opt
  var color = getColor(opt)
  var half = width / 2

  if (width === 0) {
    return
  }

  //
  line = line || 10
  font = font || 32
  el.width = width
  el.height = width

  ctx.clearRect(0, 0, width, width)

  ctx.strokeStyle = bg
  ctx.lineWidth = line
  ctx.lineCap = 'round'

  ctx.beginPath()
  ctx.arc(
    half,
    half,
    half - line / 2,
    (Math.PI / 180) * start,
    (Math.PI / 180) * end,
    false
  ) //整圆
  ctx.stroke()
  ctx.closePath()

  if (value > 0) {
    ctx.strokeStyle = color
    ctx.beginPath()
    ctx.arc(
      half,
      half,
      half - line / 2,
      (Math.PI / 180) * start,
      (Math.PI / 180) * (((end - start) * value) / 100 + start),
      false
    ) //整圆
    ctx.stroke()
    ctx.closePath()
  }
  if (showText) {
    ctx.fillStyle = color
    ctx.font = `${font}px Arial`
    ctx.textBaseline = 'middle'
    ctx.textAlign = 'center'
    ctx.fillText((value < 100 ? value.toFixed(1) : 100) + '%', half, half)
  }
}

export default class Progress {
  props = {
    value: 0,
    type: 'line',
    colors: ['#48c9b0'],
    'default-color': '#f2f5fc',
    'line-size': null,
    'font-size': null,
    'show-text': false
  }

  state = {
    width: 0,
    height: 0
  }

  __init__() {
    /* render */

    this.__CANVAS__ = this.root.children[1]
  }

  get value() {
    return this.props.value
  }

  set value(val) {
    this.props.value = +val.toFixed(2)
    if (this.props.value > 100) {
      this.props.value = 100
    } else if (this.props.value < 0) {
      this.props.value = 0
    }
    this.draw()
  }

  draw() {
    var type = this.props.type
    switch (type) {
      case 'circle':
        drawCircle(this.__CANVAS__, this.state, this.props)
        break

      case 'dashboard':
        drawCircle(this.__CANVAS__, this.state, this.props, -225, 45)
        break

      // line
      default:
        drawLine(this.__CANVAS__, this.state, this.props)
        break
    }
  }

  mounted() {
    this.state.width = this.clientWidth
    this.state.height = this.clientHeight

    this.draw()
  }

  watch() {
    switch (name) {
      case 'line-size':
      case 'font-size':
        this.props[name] = val
        break

      case 'default-color':
        this.props[name] = val || '#f2f5fc'
        break
      case 'colors':
        if (val === null) {
          this.props.colors = ['#48c9b0']
        } else {
          this.props.colors = val.split(',').map(s => s.trim())
        }
        break

      case 'type':
        this.props.type = val || 'line'
        break

      case 'show-text':
        this.props[name] = val !== null
        break

      case 'value':
        var v = +val
        if (v === v) {
          this.value = +v
        }
        break
    }
  }
}
</script>
