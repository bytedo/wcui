<template>
  <canvas />
</template>

<style lang="scss">
:host {
  display: flex;
  width: 100%;
  height: 10px;

  canvas {
    display: block;
  }
}

:host([type='circle']),
:host([type='dashboard']) {
  display: inline-flex;
  width: 160px;
  height: 160px;
}
</style>

<script>
import { drawLine, drawCircle } from './canvas'

export default class Progress {
  props = {
    value: 0,
    type: 'line',
    colors: ['#48c9b0'],
    'default-color': '#f2f5fc',
    'line-size': null,
    'font-size': null,
    'show-text': false
  }

  state = {
    width: 0,
    height: 0
  }

  __init__() {
    /* render */

    this.__CANVAS__ = this.root.children[1]
    // // 圆形进度条默认值为32
    // if (this.props.type === 'circle' || this.props.type === 'dashboard') {
    //   this.props['font-size'] = 32
    // }
  }

  get value() {
    return this.props.value
  }

  set value(val) {
    this.props.value = +val.toFixed(2)
    if (this.props.value > 100) {
      this.props.value = 100
    } else if (this.props.value < 0) {
      this.props.value = 0
    }
    this.draw()
  }

  draw() {
    var type = this.props.type
    switch (type) {
      case 'circle':
        drawCircle(this.__CANVAS__, this.state, this.props)
        break

      case 'dashboard':
        drawCircle(this.__CANVAS__, this.state, this.props, -225, 45)
        break

      // line
      default:
        drawLine(this.__CANVAS__, this.state, this.props)
        break
    }
  }

  mounted() {
    this.state.width = this.clientWidth
    this.state.height = this.clientHeight

    this.draw()
  }

  watch() {
    switch (name) {
      case 'line-size':
      case 'font-size':
        this.props[name] = val || 10
        break

      case 'default-color':
        this.props[name] = val || '#f2f5fc'
        break
      case 'colors':
        if (val === null) {
          this.props.colors = ['#48c9b0']
        } else {
          this.props.colors = val.split(',').map(s => s.trim())
        }
        break

      case 'type':
        this.props.type = val || 'line'
        break

      case 'show-text':
        this.props[name] = val !== null
        break

      case 'value':
        var v = +val
        if (v === v) {
          this.value = +v
        }
        break
    }
  }
}
</script>
