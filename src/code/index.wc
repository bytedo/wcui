<template>
  <div class="code-box">
    <header class="title">
      <span><i></i><i></i><i></i></span>
      <span></span>
      <span>
        <wc-icon title="运行" class="act run" is="live"></wc-icon>
        <wc-icon title="复制" class="act cp" is="doc"></wc-icon>
      </span>
    </header>
    <wc-scroll axis="y" class="code"></wc-scroll>
  </div>
</template>

<style lang="scss">
:host {
  display: flex;
}

.code-box {
  display: flex;
  flex-direction: column;
  position: relative;
  width: 100%;
  max-height: 610px;
  margin: 10px 0;
  border: 1px solid var(--color-plain-2);
  border-radius: 2px;

  .title {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    height: 24px;
    padding: 0 12px;
    line-height: 1;
    font-size: 12px;
    background: var(--color-plain-2);
    user-select: none;

    i {
      display: inline-block;
      width: 10px;
      height: 10px;
      margin-right: 6px;
      border-radius: 50%;
      background: var(--color-red-1);
    }
    i:nth-child(2) {
      background: var(--color-orange-1);
    }
    i:nth-child(3) {
      background: var(--color-green-1);
    }

    .act {
      --size: 16px;
      margin: 0 2px;
      color: var(--color-grey-2);
      cursor: pointer;

      &:hover {
        color: var(--color-grey-3);
      }
      &.run {
        display: none;
      }
    }
  }

  .code {
    flex: 1;
    padding: 5px 0;
    line-height: 18px;
    font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;
    font-size: 13px;
    background: linear-gradient(to right, var(--color-plain-1) 40px, #fff 40px);
    color: var(--color-dark-1);
    cursor: text;
    counter-reset: code;

    p {
      display: flex;
      position: relative;
      min-height: 18px;
      padding: 0 8px 0 45px;
      white-space: pre-wrap;
      word-wrap: break-word;

      &::before {
        position: absolute;
        left: 0;
        width: 40px;
        height: 100%;
        padding-right: 5px;
        text-align: right;
        color: var(--color-grey-1);
        content: counter(code);
        counter-increment: code;
      }
    }
  }
}

:host([exec]) {
  .title {
    .run {
      display: inline-block;
    }
  }
}

:host([dark]) {
  .code-box {
    border-color: var(--color-dark-2);

    .title {
      background: var(--color-dark-2);
    }

    .code {
      background: linear-gradient(
        to right,
        #596b7f 40px,
        var(--color-dark-1) 40px
      );
      color: var(--color-plain-3);

      p::before {
        color: var(--color-grey-3);
      }
    }
  }
}
</style>

<script>
import '../scroll/index'
import '../layer/index'
import $ from '../utils'

export default class Code {
  props = {
    dark: '',
    lang: ''
  }

  __init__() {
    /* render */

    // .code-box
    var elem = this.root.children[1]
    var header = elem.children[0]

    this.__CODE__ = elem.children[1]

    this.__LANG__ = header.children[1]
    this.__RUN__ = header.children[2].firstElementChild
    this.__CP__ = header.children[2].lastElementChild
  }

  get value() {
    return this.props.content
  }

  set value(txt) {
    this.props.content = txt
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')

    txt = txt
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .split('\n')
    txt = txt.map(s => `<p>${s}</p>`).join('')
    this.__CODE__.innerHTML = txt
  }

  mounted() {
    var txt = this.innerHTML || this.textContent
    this.value = txt.replace(/^[\r\n]|\s{2,}$/g, '')
    this.textContent = ''

    this._cpFN = $.bind(this.__CP__, 'click', ev => {
      try {
        navigator.clipboard.writeText(this.value)
        layer.toast('复制到粘贴板成功', 'success')
      } catch (err) {
        layer.toast('复制到粘贴板失败', 'error')
      }
    })
    // 运行按钮的点击, 内部不处理逻辑, 传递给外部的run事件
    this._runFN = $.bind(this.__RUN__, 'click', ev => {
      this.dispatchEvent(
        new CustomEvent('run', {
          detail: this.value
        })
      )
    })
  }

  unmounted() {
    $.unbind(this.__CP__, 'click', this._cpFN)
    $.unbind(this.__RUN__, 'click', this._runFN)
  }

  watch() {
    switch (name) {
      case 'lang':
        this.props.lang = val.toLowerCase()
        this.__LANG__.textContent = this.props.lang
        break

      case 'value':
        this.value = val
        this.removeAttribute('value')
        break
    }
  }
}
</script>
