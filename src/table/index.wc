<template>
  <div class="table">
    <ul class="thead"></ul>
    <wc-scroll class="tbody"><slot /></wc-scroll>
    <ul class="tfoot"></ul>
  </div>
</template>

<style lang="scss">
:host {
  display: flex;
  width: 100%;
  color: nth($cd, 1);
}
ul,
li {
  list-style: none;
}
.table {
  overflow: hidden;
  display: flex;
  flex-direction: column;
  min-width: 100%;
  // height: 100%;
  border: 1px solid nth($cp, 3);
  border-right: 0;

  .thead,
  .tfoot {
    width: 100%;
    background: nth($cp, 1);
    user-select: none;
    -moz-user-select: none;
  }

  .tr {
    display: flex;
    height: 100%;
  }
  .td {
    flex: 1;
    display: flex;
    align-items: center;
    min-height: 36px;
    border-right: 1px solid nth($cp, 3);
    border-bottom: 1px solid nth($cp, 3);

    &.flex-2 {
      flex: 2;
    }
    &.flex-3 {
      flex: 3;
    }
    &.flex-4 {
      flex: 4;
    }
    &.flex-5 {
      flex: 5;
    }
    &.flex-6 {
      flex: 6;
    }
    &.flex-7 {
      flex: 7;
    }
    &.flex-8 {
      flex: 8;
    }
  }

  .thead .td {
    justify-content: center;
    text-align: center;
  }

  .cell {
    padding: 3px 5px;
    word-wrap: break-word;
    word-break: break-all;
  }
}
</style>

<script>
import '../scroll/index'
import './tr'
import './td'

export default class Table {
  props = {
    thead: null,
    flex: []
  }

  __init__() {
    /* render */
    var elem = this.root.children[1]
    this.__THEAD__ = elem.children[0]
    this.__TBODY__ = elem.children[1]
    this.__TFOOT__ = elem.children[2]
  }

  __render__() {
    var { thead, flex } = this.props

    if (thead) {
      this.__THEAD__.innerHTML = `
        <li class="tr">
          ${thead
            .map((name, i) => {
              let w = flex[i]
              if (typeof w === 'number') {
                w = ` flex-${w || 1}"`
              } else {
                w = `" style="${w}"`
              }
              return `
              <section class="td${w}>
                <div class="cell">${name}</div>
              </section>`
            })
            .join('')}
        </li>`
    }
  }

  mounted() {
    var tds = Array.from(this.children[0].children).map(it => {
      let flex = +it.getAttribute('flex') || 1
      let style = it.getAttribute('style')

      return style || flex
    })
    this.props.flex = tds
    log(tds)
  }

  watch() {
    switch (name) {
      case 'thead':
        if (val) {
          try {
            this.props.thead = JSON.parse(val)
            this.__render__()
          } catch (err) {}
          this.removeAttribute('thead')
        }
        break

      default:
        break
    }
  }
}
</script>
