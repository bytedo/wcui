<template>
  <div class="table">
    <wc-tr thead class="thead"></wc-tr>
    <wc-scroll class="tbody"><slot /></wc-scroll>
    <div class="line"></div>
    <wc-tr tfoot class="tfoot"></wc-tr>
  </div>
</template>

<style lang="scss">
:host {
  display: flex;
  width: 100%;
  color: nth($cd, 1);
}
.table {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;

  .thead,
  .tfoot {
    overflow: hidden;
    width: 100%;
    border: 1px solid nth($cp, 3);
    --border-bottom: 0;
    background: nth($cp, 1);
    user-select: none;
    -moz-user-select: none;
  }
  .thead {
    border-bottom: 0;
  }
  .tfoot {
    display: none;
    border-top: 0;
  }
  .tbody {
    flex: 1;
    border: 1px solid nth($cp, 3);

    ::slotted(wc-tr:last-child) {
      --border-bottom: 0;
    }
  }
}
</style>

<script>
import $ from '../utils'
import '../scroll/index'
import './tr'
import './td'

export default class Table {
  props = {
    thead: null,
    flex: []
  }

  __init__() {
    /* render */
    var elem = this.root.children[1]
    this.__THEAD__ = elem.children[0]
    this.__TBODY__ = elem.children[1]
    this.__TFOOT__ = elem.children[2]
  }

  __render__() {
    var { thead, flex } = this.props

    if (thead) {
      this.__THEAD__.innerHTML = thead
        .map((name, i) => {
          let w = flex[i]
          if (typeof w === 'number') {
            w = `flex="${w}"`
          } else if (typeof w === 'string') {
            w = `style="${w}"`
          } else {
            w = ''
          }
          return `<wc-td no-border align="center" ${w}>${name}</wc-td>`
        })
        .join('')
    }
  }

  mounted() {
    var tds = Array.from(this.children[0].children).map(it => {
      let flex = +it.getAttribute('flex') || 1
      let style = it.getAttribute('style')

      return style || flex
    })
    this.props.flex = tds

    $.bind(this.__TBODY__, 'scroll', ev => {
      this.__THEAD__.scrollLeft = ev.detail.x
    })
  }

  watch() {
    switch (name) {
      case 'thead':
        if (val) {
          try {
            this.props.thead = JSON.parse(val)
            this.__render__()
          } catch (err) {}
          this.removeAttribute('thead')
        }
        break

      default:
        break
    }
  }
}
</script>
