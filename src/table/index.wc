<template>
  <div class="table">
    <ul class="thead"></ul>
    <ul class="tbody"></ul>
    <ul class="tfoot"></ul>
  </div>
</template>

<style lang="scss">
:host {
  display: flex;
  width: 100%;
  height: 100%;
  color: nth($cd, 1);
}
ul,
li {
  list-style: none;
}
.table {
  overflow: hidden;
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  border-top: 1px solid nth($cp, 3);
  border-left: 1px solid nth($cp, 3);

  ul {
    width: 100%;
  }

  .thead,
  .tfoot {
    // height: 40px;
    background: nth($cp, 1);
    user-select: none;
    -moz-user-select: none;
  }

  .tr {
    display: flex;
    height: 100%;
  }
  .td {
    flex: 1;
    display: flex;
    align-items: center;
    min-height: 36px;
    border-right: 1px solid nth($cp, 3);
    border-bottom: 1px solid nth($cp, 3);
  }

  .thead .td {
    justify-content: center;
    text-align: center;
  }
  .tbody .tr:hover {
    background-color: #fbfbfb;
  }

  .cell {
    padding: 3px 5px;
  }
}
</style>

<script>
export default class Table {
  props = {
    list: null
  }

  __init__() {
    /* render */
    this.__OUTER__ = this.root.children[1]
  }

  __updateTable__(force) {
    if (this._clear && !force) {
      delete this._clear
      return
    }

    var { items } = this.props

    if (!this._clear) {
      items = Array.from(this.children)
        .filter(it => it.tagName === 'WC-TABLE-ITEM')
        .map(it => {
          return {
            label: it.getAttribute('label'),
            prop: it.getAttribute('prop')
          }
        })

      this.props.items = items
    }

    this._clear = true
    this.innerText = ''

    this.__render__()
  }

  __render__() {
    var { list, items } = this.props

    if (list && items) {
      this.__OUTER__.innerHTML = `
      <ul class="thead">
        <li class="tr">
          ${items
            .map(_ => {
              return `
              <section class="td">
                <div class="cell">${_.label}</div>
              </section>`
            })
            .join('')}
        </li>
      </ul>
      <ul class="tbody">
        ${list
          .map((it, i) => {
            return `<li class="tr">
              ${items
                .map(_ => {
                  return `
                  <section class="td">
                    <div class="cell">${it[_.prop]}</div>
                  </section>`
                })
                .join('')}
              </li>`
          })
          .join('')}
        </ul>`
    }
  }

  mounted() {
    // this.__updateTable__()

    this.__observer = new MutationObserver(_ => this.__updateTable__(true))
    this.__observer.observe(this, {
      childList: true,
      subtree: true,
      characterData: true
    })
  }

  watch() {
    switch (name) {
      case 'list':
        if (val) {
          try {
            this.props.list = JSON.parse(val)
            this.__render__()
          } catch (err) {}
          this.removeAttribute('options')
        }
        break

      default:
        break
    }
  }
}
</script>
